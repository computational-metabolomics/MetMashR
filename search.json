[{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Extending MetMashR","text":"number software solutions available annotate LCMS metabolomics datasets. included small number annotation_sources MetMashR ones use . document describe extend provided templates include new sources bespoke requirements.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Extending MetMashR","text":"latest versions struct MetMashR compatible current R version can installed using BiocManager. installed can activate packages usual way:","code":"# install BiocManager if not present if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # install MetMashR and dependencies BiocManager::install(\"MetMashR\") # load the packages library(struct) library(MetMashR) library(metabolomicsWorkbenchR) library(ggplot2)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"example-study","dir":"Articles","previous_headings":"","what":"Example study","title":"Extending MetMashR","text":"example going import annotations study Metabolomics Workbench build workflow clean table search PubChem CIDs can present images annotated metabolites study. First, need import table annotations Metabolomics Workbench. make use metabolomicsWorkbenchR package. imported table 747 rows 8 columns. brevity vignette cached first 10 rows stored package. can convert imported table annotation_table: annotation_table objects must id row table. later, examining outputs workflow steps, can easily trace annotation workflow. default id_column = NULL create new column ‘.MetMashR_id’ containing row index identifier unless provided alternative column name, name column already table. Two steps needed clean table provided MetMashR: removal empty columns removal suffix duplicate molecule names implement steps example add new workflow steps using struct package template system. also implement new annotation_source import data Metabolomics Workbench part workflow.","code":"# get annotations AN = do_query(     context = \"study\",     input_item = \"analysis_id\",     input_value = \"AN000465\",     output_item = \"metabolites\") AT = annotation_table(AN, id_column = NULL)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"annotation-sources","dir":"Articles","previous_headings":"","what":"Annotation Sources","title":"Extending MetMashR","text":"Annotation sources mechanism used MetMashR get tables annotation data R well-defined format. extension base annotation_source template provides methods import raw annotation table convert type annotation_table suitable input data. example, cd_source defines methods import annotation data Compound Discoverer’s Excel format convert lcms_table object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"adding-new-annotation-sources","dir":"Articles","previous_headings":"","what":"Adding new annotation sources","title":"Extending MetMashR","text":"plan import annotation data Metabolomics Workbench lot consider implementing new annotation_source import annotations part workflow model sequence. now example implementing new annotation_source. annotation_source objects use model template struct package, create definition source --fly. However, annotation_sources likely used multiple times read data source, instead define new source permanent way, using code can included script sourced, new R package. three key components annotation source object, indeed struct model object: definition object defines input output parameters . function create instance object populate initial values input parameters. model_apply method. annotation sources method read data source file parse annotation_table. implement steps now.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"the-class-definition","dir":"Articles","previous_headings":"Adding new annotation sources","what":"The class definition","title":"Extending MetMashR","text":"example input output slots, defined using slots parameter, differentiated name using .params .outputs prototype. defined libraries prototype. list R package names needed use object addition depends/imports MetMashR.","code":".mwb_source<-setClass(     \"mwb_source\",     contains = c('annotation_database'),     prototype = list(         name = 'Import from Metabolomics Workbench',         libraries = 'metabolomicsWorkbenchR'     ) )"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"the-calling-function","dir":"Articles","previous_headings":"Adding new annotation sources","what":"The calling function","title":"Extending MetMashR","text":"calling function small function creates new instance source object using new_struct provides mechanism initialise values based input parameters. use ellipsis ... allows us pass additional values base struct object like name description without including function definition, case want override values defined prototype class definition previous section.","code":"mwb_source = function(         ...) {          # new object     out = new_struct(         'mwb_source',         ...     )     return(out) }"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"the-import-method","dir":"Articles","previous_headings":"Adding new annotation sources","what":"The import method","title":"Extending MetMashR","text":"Like model objects, workhorse method annotation sources method_apply. annotation sources method used import parse source files annotation_table. use setMethod define method new source. Note pass M$analysis id do_query function can import annotations Metabolomics Workbench study using new source object.","code":"setMethod(f = \"read_database\",           signature = c(\"mwb_source\"),           definition = function(obj) {                              ## get annotations using metabolomicsWorkbenchR               # AN = do_query(               #    context = \"study\",               #    input_item = \"analysis_id\",               #    input_value = M$analysis_id,               #    output_item = \"metabolites\")                              ## for vignette use locally cached subset               AN = readRDS(                   system.file('extdata/AN000465_subset.rds',package='MetMashR')               )                return(AN)           } )"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"using-the-new-source","dir":"Articles","previous_headings":"Adding new annotation sources","what":"Using the new source","title":"Extending MetMashR","text":"new mwb_source method_apply method ready use. import table can use import_source method: Variable imported cleaned annotation_database Metabolomics Workbench can used input model_apply models sequence, e.g. look PubChem Ids etc.","code":"# initialise source SRC = mwb_source(     source = 'AN000465' )  # import AT = read_source(SRC)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"adding-annotation-workflow-steps","dir":"Articles","previous_headings":"","what":"Adding annotation workflow steps","title":"Extending MetMashR","text":"MetMashR workflow steps use model template struct package. Although originally intended statistical methods, model template flexible way implement many different kinds workflow step. struct package provides convenience functions “--fly” implementation new model objects. use convenience functions implement first new model. Examples also included struct package vignette.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"empty-column-removal","dir":"Articles","previous_headings":"Adding annotation workflow steps","what":"Empty column removal","title":"Extending MetMashR","text":"define new model object can use set_struct_obj function. new object fairly simple input parameters required. output slot contain annotation_table removed empty columns. prototype input provide name description new model. good practice intentions model explicitly stated stay model wherever use , helping ensure transparency, reproducibility etc. also defined default output model providing predicted prototype. can now create instance new model, use show method display information . can use new model need implement model_apply method . function actually work. case search columns missing values remove annotation_table. define method use set_obj_method function. Note signature specify second input annotation_table. new model ready use. can test using model_apply method, check columns removed. number columns : number columns afterwards :","code":"set_struct_obj(     class_name = 'drop_empty_columns',     struct_obj = 'model',     params = character(0),     outputs = c(updated = 'annotation_source'),     private = character(0),     prototype = list(         name = 'Drop empty columns',         description = paste0(             'A workflow step that removes columns from an annotation table ',             'where all rows are NA.'),         predicted = 'updated'     ) ) M = drop_empty_columns() show(M) #> A \"drop_empty_columns\" object #> ----------------------------- #> name:          Drop empty columns #> description:   A workflow step that removes columns from an annotation table where all rows are NA. #> outputs:       updated  #> predicted:     updated #> seq_in:        data set_obj_method(     class_name = 'drop_empty_columns',     method_name = 'model_apply',     signature = c('drop_empty_columns','annotation_source'),     definition = function(M,D) {                  # search for columns of NA         W = lapply( # for each column             D$data, # in the annotation table             function(x){                 all(is.na(x)) # return TRUE if all rows are NA             }         )                  # get index of columns with all rows NA         idx = which(unlist(W))                  # if any found, remove from annotation table         if (length(idx)>0) {             D$data[,idx] = NULL         }                  # update model object         M$updated = D                  # return object         return(M)     } ) M = model_apply(M,AT) ncol(AT$data) #> [1] 8 ncol(M$updated$data) #> [1] 5"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"suffix-removal","dir":"Articles","previous_headings":"Adding annotation workflow steps","what":"Suffix removal","title":"Extending MetMashR","text":"second model removes suffix molecule names. necessary want use molecule names e.g search PubChem identifiers using REST API; wont get match suffix part molecule name. drop_empty_columns use set_struct_obj set_obj_method function create new workflow step. model included two input parameters provided default values prototype: column_name: name column annotation table containing molecule names clean: flag replace old column TRUE add new column FALSE","code":"# define new model object set_struct_obj(     class_name = 'remove_suffix',     struct_obj = 'model',     params = c(clean = 'logical',column_name = 'character'),     outputs = c(updated = 'annotation_source'),     prototype = list(         name = 'Remove suffix',         description = paste0(             'A workflow step that removes suffixes from molecule names by ',             'splitting a string at the last underscore an retaining the part',             'of the string before the underscore.'),         predicted = 'updated',         clean = FALSE,         column_name = 'V1'     ) )  # define method for new object set_obj_method(     class_name = 'remove_suffix',     method_name = 'model_apply',     signature = c('remove_suffix','annotation_source'),     definition = function(M,D) {                  # get list of molecule names         x = D$data[[M$column_name]]                  # split string at last underscore         s = strsplit(x, \"_(?!.*_)\", perl=TRUE)                  # get left hand side         s = lapply(s,'[',1)                  # if clean replace existing column, otherwise new column         if (M$clean) {             D$data[[M$column_name]] = unlist(s)         } else {             D$data$name.fixed = unlist(x)         }                  # update model object         M$updated = D                  # return object         return(M)     } )"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"metabolite-mashing","dir":"Articles","previous_headings":"","what":"Metabolite mashing","title":"Extending MetMashR","text":"Now defined new workflow steps can use model_seq (workflow), alongside existing steps mash annotations tables containing identifiers additional information. case following: import annotations Metabolomics Workbench remove empty columns remove suffixes molecule names search Metabolomics Workbench refmet database identifiers use PubChem REST API search compound CIDs combine CID columns refmet pubchem single column, giving priority refmet, obtain single column identifiers confidence many metabolites possible use PubChem REST API obtain SMILES metabolite clarity workflow import refmet database using workflow instead importing -line. also import cached REST API responses dont overburden service generating vignette. practice better create cache using e.g. rds_database, sql_database struct_database objects write access. See vignette [TODO] details. Note first step workflow import data Metabolomics Workbench, need provide empty annotation_table input model_apply updated run workflow. table processed workflow use OpenBabel generate images molecular structures SMILES.","code":"# refmet refmet = mwb_refmet_database() # pubchem caches pubchem_cid_cache = rds_database(     source = system.file('cached/pubchem_cid_cache.rds',                        package='MetMashR') ) pubchem_smile_cache = rds_database(     source = system.file('cached/pubchem_smiles_cache.rds',                        package='MetMashR') ) # prepare sequence M = import_source() +     drop_empty_columns() +     remove_suffix(         clean = TRUE,         column_name = 'metabolite_name') +     database_lookup(         query_column = 'refmet_name',         database_column = 'name',         database = refmet,         suffix = '_mwb',         include = 'pubchem_cid') +     pubchem_compound_lookup(         query_column = 'metabolite_name',         search_by = 'name',         suffix = '_pc',         output = 'cids',         records = 'best',         delay = 0.2,         cache = pubchem_cid_cache) +     combine_columns(          column_names = c('pubchem_cid_mwb','CID_pc'),         output_name = 'pubchem_cid',         source_name = 'pubchem_cid_source',         source_tags = c('mwb','pc'),         clean = TRUE) +     pubchem_property_lookup(         query_column = 'pubchem_cid',         search_by = 'cid',         suffix = '',         property = 'CanonicalSMILES',         delay = 0.2,         cache = pubchem_smile_cache)  # apply sequence M = model_apply(M,mwb_source(source = 'AN000465')) # prepare chart C = openbabel_structure(     smiles_column = 'CanonicalSMILES',     row_index = 1,     scale_to_fit = FALSE,     view_port = 400,     image_size = 500 )  # loop over some records and plot some of the molecules G = list() x=1 for (k in c(3,5)) {      C$row_index = k     G[[x]]=chart_plot(C,predicted(M))     x=x+1 } cowplot::plot_grid(plotlist = G,nrow=1,labels='AUTO')"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Extending MetMashR","text":"Extending templates provided struct implement workflow steps metabolite mashing straight forward using either provided --fly functions scripting permanent solutions. objects use templates compatible workflow objects provided follow templates. well new workflow steps MetMashR can also extended include additional annotation sources.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/Extending_MetMashR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Extending MetMashR","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.4                 metabolomicsWorkbenchR_1.12.0 #> [3] MetMashR_0.1.0                struct_1.14.0                 #> [5] BiocStyle_2.30.0              #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.0            farver_2.1.1                #>  [3] dplyr_1.1.4                 bitops_1.0-7                #>  [5] fastmap_1.1.1               RCurl_1.98-1.14             #>  [7] digest_0.6.34               lifecycle_1.0.4             #>  [9] sf_1.0-15                   rsvg_2.6.0                  #> [11] magrittr_2.0.3              compiler_4.3.2              #> [13] rlang_1.1.3                 sass_0.4.8                  #> [15] tools_4.3.2                 utf8_1.2.4                  #> [17] yaml_2.3.8                  data.table_1.14.10          #> [19] knitr_1.45                  labeling_0.4.3              #> [21] S4Arrays_1.2.0              ontologyIndex_2.11          #> [23] classInt_0.4-10             DelayedArray_0.28.0         #> [25] plyr_1.8.9                  abind_1.4-5                 #> [27] KernSmooth_2.23-22          withr_3.0.0                 #> [29] purrr_1.0.2                 BiocGenerics_0.48.1         #> [31] desc_1.4.3                  grid_4.3.2                  #> [33] stats4_4.3.2                fansi_1.0.6                 #> [35] e1071_1.7-14                colorspace_2.1-0            #> [37] scales_1.3.0                MultiAssayExperiment_1.28.0 #> [39] SummarizedExperiment_1.32.0 cli_3.6.2                   #> [41] rmarkdown_2.25              crayon_1.5.2                #> [43] ragg_1.2.7                  generics_0.1.3              #> [45] httr_1.4.7                  DBI_1.2.1                   #> [47] cachem_1.0.8                proxy_0.4-27                #> [49] stringr_1.5.1               zlibbioc_1.48.0             #> [51] ggthemes_5.0.0              BiocManager_1.30.22         #> [53] XVector_0.42.0              matrixStats_1.2.0           #> [55] vctrs_0.6.5                 Matrix_1.6-5                #> [57] jsonlite_1.8.8              bookdown_0.37               #> [59] IRanges_2.36.0              S4Vectors_0.40.2            #> [61] magick_2.8.2                systemfonts_1.0.5           #> [63] jquerylib_0.1.4             units_0.8-5                 #> [65] glue_1.7.0                  pkgdown_2.0.7               #> [67] ChemmineOB_1.40.0           cowplot_1.1.2               #> [69] stringi_1.8.3               gtable_0.3.4                #> [71] GenomeInfoDb_1.38.5         GenomicRanges_1.54.1        #> [73] munsell_0.5.0               tibble_3.2.1                #> [75] pillar_1.9.0                htmltools_0.5.7             #> [77] GenomeInfoDbData_1.2.11     R6_2.5.1                    #> [79] textshaping_0.3.7           evaluate_0.23               #> [81] lattice_0.22-5              Biobase_2.62.0              #> [83] highr_0.10                  memoise_2.0.1               #> [85] bslib_0.6.1                 class_7.3-22                #> [87] Rcpp_1.0.12                 SparseArray_1.2.3           #> [89] xfun_0.41                   fs_1.6.3                    #> [91] MatrixGenerics_1.14.0       pkgconfig_2.0.3"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Annotation of mixtures of standards","text":"latest versions struct MetMashR compatible current R version can installed using BiocManager. installed can activate packages usual way:","code":"# install BiocManager if not present if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # install MetMashR and dependencies BiocManager::install(\"MetMashR\") # load the packages library(MetMashR) library(ggplot2) library(dplyr)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Annotation of mixtures of standards","text":"Mixtures standards can used build annotation libraries. LCMS libraries can collected using chromatography instrument samples. library allows high-confidence (MSI level 1) detection/annotation MTox metabolites, comparison external databases/sources rely m/z -silico predictions. vignette explore annotations generated using Compound Discoverer (CD) LipidSearch (LS) several mixtures standards. content standard mixtures known, can assess ability CD LS annotate metabolites.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Annotation of mixtures of standards","text":"data collected corresponds mixtures high-purity standards measured using LCMS, intention building internally measured library including m/z retention times standard. Analysis standard mixtures resulted four data tables: HILIC_NEG, HILIC_POS, LIPIDS_POS LIPIDS_NEG. loosely refer “assays”. four assays used input Compound Discoverer (CD) LipidSearch (LS) software, software tools commonly used annotation LCMS datasets.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"importing-the-annotations","dir":"Articles","previous_headings":"","what":"Importing the annotations","title":"Annotation of mixtures of standards","text":"MetMashR includes cd_source ls_source objects. objects read output files CD LS parse annotation_table object. Importing annotation tables isn’t always enough; sometimes need cleaned processed . therefore define two MetMashR workflows, one CD one LS, import tables apply source-specific cleaning.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"importing-compound-discoverer-annotations","dir":"Articles","previous_headings":"Importing the annotations","what":"Importing Compound Discoverer annotations","title":"Annotation of mixtures of standards","text":"CD file format expected cd_source Excel format; see [TODO] details generate format CD. CD MetMashR workflow like : Import CD annotations convert annotation_table format Filter include “Full match” annotations Resolve duplicates import annotations, add column indicating assay annotations associated , include tag row indicating source assay. useful later processing combined tables. resolution duplicates needed CD might assign metabolite + adduct multiple peaks. choose match highest mzcloud score using .select_max helper function combine_records` object. object wrapper [dplyr::reframe()]. CD variable now list containing workflow assay. default output workflow processed lcms_table, extension annotation_table requires m/z retention time column defined. summary table e.g. HILIC_NEG assay can displayed console: HILIC_NEG table shown . MetMashR workflows store output step. can use explore impact different workflow steps. example, can display different compound matched present filtering pie charts. First, create pie chart object specify parameters. Now create plots using chart_plot add additional settings using ggplot2, arrange plots using cowplot. Note use square brackets index step workflow want access e.g. HILIC_NEG[3].  clear plots filter removed annotations without “full match”.  can assess quality annotations examining histogram ppm errors MS2 peaks library. wide distribution may indicate false positives. distribution offset zero indicates m/z drift present.  Note plotted distribution based step filtering range, set vertical red lines equal range filter can see parts histogram affected range filter.","code":"# prepare workflow M = import_source() +     add_labels(         labels = c(             assay = 'placeholder', # will be replaced later             source_name = 'CD'         ))+     filter_labels(         column_name = 'compound_match',         labels = 'Full match',         mode = 'include')+     filter_labels(         column_name = 'compound_match',         labels = 'Full match',         mode = 'include') +     filter_range(         column_name = 'library_ppm_diff',         upper_limit = 2,         lower_limit = -2,         equal_to = FALSE) +     combine_records(         group_by = c('compound','ion'),         default_fcn = .select_max(             max_col = 'mzcloud_score',             keep_NA = FALSE,             use_abs = TRUE         )      )  # place to store results CD = list() for (assay in c('HILIC_NEG','HILIC_POS','LIPIDS_NEG','LIPIDS_POS')) {     # prepare source     AT = cd_source(         source = c(             system.file(                 paste0('extdata/MTox/CD/',assay,'.xlsx'),                 package = 'MetMashR'),             system.file(                 paste0('extdata/MTox/CD/',assay,'_comp.xlsx'),                 package = 'MetMashR')),         tag = paste0('CD_',assay))          # update labels in workflow     M[2]$labels$assay = assay          # apply workflow to source     CD[[assay]] = model_apply(M,AT) } predicted(CD$HILIC_NEG) #> A \"cd_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  sheets  #> annotations:   219 rows x 21 columns C = annotation_pie_chart(     factor_name = 'compound_match',     label_rotation = FALSE,     label_location = 'outside',     legend = TRUE,     label_type = 'percent',     centre_radius = 0.5,     centre_label = '.total' ) # plot individual charts g1 = chart_plot(C,predicted(CD$HILIC_NEG[3])) +      ggtitle('Compound matches\\nafter filtering') +      theme(plot.title = element_text(hjust = 0.5))    g2 = chart_plot(C,predicted(CD$HILIC_NEG[2])) +      ggtitle('Compound matches\\nbefore filtering') +      theme(plot.title = element_text(hjust = 0.5))    # get legend leg  = cowplot::get_legend(g2)  # layout cowplot::plot_grid(     g2+theme(legend.position = 'none'),     g1+theme(legend.position = 'none'),     leg,     nrow=1,     rel_widths = c(1,1,0.5)) C = annotation_histogram(     factor_name = 'library_ppm_diff',vline = c(-2,2) ) G=list() G$HILIC_NEG = chart_plot(C,predicted(CD$HILIC_NEG[2]))  G$HILIC_POS = chart_plot(C,predicted(CD$HILIC_POS[3]))   cowplot::plot_grid(plotlist=G,labels=c('HILIC_NEG','HILIC_POS'))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"importing-lipidsearch-annotations","dir":"Articles","previous_headings":"Importing the annotations","what":"Importing LipidSearch annotations","title":"Annotation of mixtures of standards","text":"file format expected ls_source .csv file. See [TODO] details generate format LS. MetMashR workflow like : Import LS annotations convert annotation_table format Filter annotations include grades B Resolve duplicates import annotations, add column indicating assay source annotations associated . also include tag table. useful later processing combined tables. LS resolve duplicates selecting annotation smallest ppm error. use combine_records object .select_min helper function . LS variable now list containing workflow assay. summary table e.g. LIPIDS_NEG assay can displayed console: LIPIDS_NEG table shown . MetMashR workflows store output step. can use explore impact different workflow steps. example, can display different Grades present filtering pie charts.","code":"# prepare workflow M = import_source() +        add_labels(         labels = c(             assay = 'placeholder', # will be replaced later             source_name = 'LS'         ))+     filter_labels(         column_name = 'Grade',         labels = c('A','B'),         mode = 'include') +     filter_labels(         column_name = 'Grade',         labels = c('A','B'),         mode = 'include') +     combine_records(         group_by = c('LipidIon'),         default_fcn = .select_min(             min_col = 'library_ppm_diff',             keep_NA = FALSE,             use_abs = TRUE         )      )  # place to store results LS = list() for (assay in c('HILIC_NEG','HILIC_POS','LIPIDS_NEG','LIPIDS_POS')) {     # prepare source     AT = ls_source(         source = system.file(             paste0('extdata/MTox/LS/MTox_2023_',assay,'.txt'),             package = 'MetMashR'),         tag = paste0('LS_',assay))           # update labels in workflow     M[2]$labels$assay = assay          # apply workflow to source     LS[[assay]] = model_apply(M,AT) } predicted(LS$LIPIDS_NEG) #> A \"ls_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  mz_column, rt_column  #> annotations:   16 rows x 14 columns C = annotation_pie_chart(     factor_name = 'Grade',     label_rotation = FALSE,     label_location = 'outside',     label_type = 'percent',     legend = FALSE,     centre_radius = 0.5,     centre_label = '.total' ) g1 = chart_plot(C,predicted(LS$LIPIDS_NEG)) +      ggtitle('Grades after filtering') +      theme(plot.margin = unit(c(1, 1.5, 1, 1.5), \"cm\"))  g2 = chart_plot(C,predicted(LS$LIPIDS_NEG[1])) +      ggtitle('Grades before filtering') +      theme(plot.margin = unit(c(1, 1.5, 1, 1.5), \"cm\"))   cowplot::plot_grid(g2,g1,nrow=1,align='v')"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"exploratory-analysis-of-annotation-sources","dir":"Articles","previous_headings":"","what":"Exploratory analysis of annotation sources","title":"Annotation of mixtures of standards","text":"annotations imported source interesting explore graphically “within source”. draw comparison “sources” later. example generate Venn diagrams providing several annotation_table inputs chart_plot function annotation_venn_chart. allows us compare columns e.g. compound names present table. , compare compound names assay within source, see overlap .e. metabolite detecting several assays.  diagram CD shows largest amount overlap assays ion mode. LS number annotations quite small, diagram less informative. However, clearly detecting larger number annotations LIPIDS assays, expected LS software designed annotate lipids molecules. annotation_venn_chart object used compare column across several annotation_tables. object can also compare groups within table, explore later. First, need combine CD LS tables.","code":"# prepare chart object C = annotation_venn_chart(     factor_name = 'compound',     line_colour = 'white',     fill_colour = '.group',     legend = TRUE,     labels = FALSE )  ## plot # get all CD tables cd = lapply(CD,predicted)  g1 = chart_plot(C,cd) + ggtitle('Compounds in CD per assay')  # get all LS tables C$factor_name = 'LipidName' ls = lapply(LS,predicted) g2 = chart_plot(C,ls) + ggtitle('Compounds in LS per assay')  # layout cowplot::plot_grid(g1,g2,nrow=2)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"combining-annotation-sources","dir":"Articles","previous_headings":"","what":"Combining Annotation Sources","title":"Annotation of mixtures of standards","text":"workflow step combine imported assay tables assay annotation source vertically single annotation table. combine_tables object can used step. Combining tables source (e.g. CD table assay) straight forward tables columns. combining different sources combine_tables object provides input parameters allow combine select columns different sources new columns information. example adduct column CD called “Ion” LS called “LipidIon”; can combine columns new column called “adduct”. specify columns retained tables, padding NA present; columns name automatically merged. Now tables combined can explore table using charts. example, visualise number annotations assay sources.  next example compare number annotations source.","code":"# get all the cleaned annotation tables in one list all_source_tables = lapply(c(CD,LS),predicted)  # prepare to merge combine_workflow =      combine_sources(         source_list = all_source_tables,         tag_ids = TRUE,         matching_columns = c(             name = 'LipidName',             name = 'compound',             adduct= 'ion',             adduct = 'LipidIon'),         keep_cols = '.all',         source_col = 'annotation_table',         exclude_cols = NULL,         tag = 'combined'     )   # merge combine_workflow = model_apply(combine_workflow,lcms_table())  # show predicted(combine_workflow) #> A \"cd_source\" object #> -------------------- #> name:          Combined annotation source #> description:   This annotation_source object was generated by combining two other sources. #> input params:  sheets  #> annotations:   912 rows x 28 columns C = annotation_pie_chart(     factor_name = 'assay',     label_rotation = FALSE,     label_location = 'outside',     label_type = 'percent',     legend = TRUE ,     centre_radius = 0.5,     centre_label = '.total' )  chart_plot(C,predicted(combine_workflow)) +     ggtitle('Annotations per assay') +      theme(plot.margin = unit(c(1, 1.5, 1, 1.5), \"cm\")) +     guides(fill=guide_legend(title=\"Assay\")) # change to plot source_name column C$factor_name = 'source_name' chart_plot(C,predicted(combine_workflow)) +     ggtitle('Annotations per source') +      theme(plot.margin = unit(c(1, 1.5, 1, 1.5), \"cm\")) +     guides(fill=guide_legend(title=\"Source\"))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"adding-identifiers","dir":"Articles","previous_headings":"","what":"Adding identifiers","title":"Annotation of mixtures of standards","text":"Ultimately like compare annotations detected using software sources list standard included samples. Comparing two tables using metabolite names less ideal, different sources might use different synonyms molecular structure. overcome much better compare tables using molecular identifiers InChIKey, unique molecule. MetMashR includes number workflow steps allow us look identifiers various databases, either stored locally, online databases PubChem using REST API. vignette use cached results don’t overburden api; practice create (see [TODO]).","code":"# import cached results inchikey_cache = rds_database(     source = file.path(         system.file('cached',package='MetMashR'),         'pubchem_inchikey_mtox_cache.rds'),     .writable = FALSE )  id_workflow =      pubchem_property_lookup(         query_column = 'name',         search_by = 'name',         suffix = '',         property = 'InChIKey',         records = 'best',         cache = inchikey_cache     )  id_workflow = model_apply(id_workflow,predicted(combine_workflow))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"improving-id-coverage","dir":"Articles","previous_headings":"","what":"Improving ID coverage","title":"Annotation of mixtures of standards","text":"ID’s obtained previous section obtained queries based molecule name. Molecule names can contain number special characters, follow different nomenclatures constructing name, well abbreviations naming conventions. useful therefore apply kind “molecule name normalisation” account properties molecule names. can use normalise_strings MetMashR object . object dictionary parameter takes form list lists. sub-list contains pattern matched replacement. example workflow include number definitions dictionary: Update compounds starting “NP” start “Compound NP” recorded PubChem. Replace molecule name containing ? NA, indicates ambiguity annotation. Remove abbreviations molecule names e.g. “adenosine triphosphate (ATP)” “(ATP)” part removed. Replace shorthand names formal names likely result match PubChem compound. Remove optical properties racemic compounds e.g. D-(+)-Glucose becomes D-Glucose. Replace Greek characters Romanised names. Greek racemic dictionaries provided MetMashR convenience. steps 2 3 workflow submit normalised names PubChem API OPSIN. utlilising serveral API’s can maximise number molecules obtain InChIKey . final step merge three columns identifiers, giving priority OPSIN, based deconstructing molecule name component parts. result OPSIN PubChem search based normalised names prioritised PubChem search using non-normalised names. can explore impact workflow steps using Venn Pie charts compare results /workflow. Venn diagram show overlap InChIKey identifiers obtained three queries. can seen normalising names resulted 37 identifiers unable obtain without normalisation. use OPSIN added 31 identifiers. column combined identifers therefore contains  next chart visualise proportion annotations query, prioritisation merging taken place. Note case identifiers might e.g. molecule present multiple rows. can see end small proportion (12.1%) identifiers least reliable query based non-normalised name.  keep records highest confidence identifiers can remove annotations based name query using filter_labels object.","code":"# prepare cached results for vignette inchikey_cache2 = rds_database(     source = file.path(         system.file('cached',package='MetMashR'),         'pubchem_inchikey_mtox_cache2.rds'),     .writable = FALSE ) inchikey_cache3 = rds_database(     source = file.path(         system.file('cached',package='MetMashR'),         'pubchem_inchikey_mtox_cache3.rds'),     .writable=FALSE )  N = normalise_strings(     search_column = 'name',     output_column = 'normalised_name',     dictionary = c(         # custom dictionary         list(             # replace \"NP\" with \"Compound NP\"             list(pattern = '^NP-',replace = 'Compound NP-'),             # replace ? with NA, since this is ambiguous             list(pattern = '?',replace = NA,fixed=TRUE),             # remove terms in trailing brackets e.g.\" (ATP)\"              list(pattern = '\\\\ \\\\([^\\\\)]*\\\\)$',replace = ''),             # replace known abbreviations             list(pattern = '(+/-)9-HpODE',                  replace = '9-hydroperoxy-10E,12Z-octadecadienoic acid',                  fixed = TRUE),             list(pattern = '(+/-)19(20)-DiHDPA',                  replace = '19,20-dihydroxy-4Z,7Z,10Z,13Z,16Z-docosapentaenoic acid',                  fixed = TRUE)         ),         # replace greek characters         .greek_dictionary,         # remove racemic properties         .racemic_dictionary     )) +     pubchem_property_lookup(         query_column = 'normalised_name',         search_by = 'name',         suffix = '_norm',         property = 'InChIKey',         records = 'best',         cache = inchikey_cache2) +     opsin_lookup(         query_column = 'normalised_name',         suffix = '_opsin',         output = 'stdinchikey',         cache = inchikey_cache3     ) +     combine_columns(         column_names = c('stdinchikey_opsin','InChIKey_norm','InChIKey'),         output_name =  'inchikey',         source_name = 'inchikey_source',         clean = TRUE     )  N = model_apply(N,predicted(id_workflow)) # venn inchikey columns C = annotation_venn_chart(     factor_name = c('InChIKey','InChIKey_norm','stdinchikey_opsin'),     line_colour = 'white',     fill_colour = '.group',     legend = TRUE,     labels = FALSE ) chart_plot(C,predicted(N[3]))+      guides(fill = guide_legend(title='Source'),            colour = guide_legend(title = 'Source')) +     theme(plot.margin = unit(c(1, 1.5, 1, 1.5), \"cm\")) # pie source of inchikey C = annotation_pie_chart(     factor_name = 'inchikey_source',     label_rotation = FALSE,     label_location = 'outside',     label_type = 'percent',     legend = TRUE,     centre_radius = 0.5,     centre_label = '.total',     count_na = TRUE ) chart_plot(C,predicted(N)) +       guides(fill = guide_legend(title='Source'),            colour = guide_legend(title = 'Source'))+     theme(plot.margin = unit(c(1, 1.5, 1, 1.5), \"cm\")) # prepare workflow FL = filter_labels(     column_name = 'inchikey_source',     labels='InChIKey',     mode='exclude') # apply FF = model_apply(FL,predicted(N))  # print summary predicted(FF) #> A \"cd_source\" object #> -------------------- #> name:          Combined annotation source #> description:   This annotation_source object was generated by combining two other sources. #> input params:  sheets  #> annotations:   465 rows x 33 columns"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"comparison-with-the-true-mixtures","dir":"Articles","previous_headings":"","what":"Comparison with the true mixtures","title":"Annotation of mixtures of standards","text":"section compare annotated features table standards known included mixtures.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"importing-the-standard-mixture-tables","dir":"Articles","previous_headings":"Comparison with the true mixtures","what":"Importing the standard mixture tables","title":"Annotation of mixtures of standards","text":"first step import tables standards mixture. data ready saved RDS file can use rds_database import . standards table contains list metabolites mixture included . also contains manually curated data providing m/z retention time metabolite, assay observed adduct.","code":"# prepare object R = rds_database(     source = file.path(         system.file('extdata',package='MetMashR'),         'standard_mixtures.rds'     ),     .writable = FALSE )  # read R = read_source(R)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"identifiers-for-the-standards","dir":"Articles","previous_headings":"Comparison with the true mixtures","what":"Identifiers for the standards","title":"Annotation of mixtures of standards","text":"standards table provides HMDB identifiers metabolite, preference work InChIkey. first task obtain InChiKey standards. standards based MTox700+ database (see [TODO]), can import MTox700+ use obtain InChIKey identifiers matching HMBD identifiers. alternative might use hmdb_lookup /pubchem_property_lookup. next plot show overlap standards assay detected manual observation.","code":"# convert standard mixtures to source, then get inchikey from MTox700+ SM = import_source() +     filter_na(         column_name = 'rt') +     filter_na(         column_name = 'median_ms2_scans') +     filter_na(         column_name = 'mzcloud_id') +     filter_range(         column_name = 'median_ms2_scans',         upper_limit = Inf,         lower_limit = 0,         equal_to = TRUE) +     database_lookup(         query_column = 'hmdb_id',         database_column = 'hmdb_id',         database = MTox700plus_database(),         include = 'inchikey',         suffix = '',         not_found = NA) +     id_counts(         id_column = 'inchikey',         count_column = 'inchikey_count',         count_na = FALSE     ) # apply SM = model_apply(SM,R) C = annotation_venn_chart(     factor_name = 'inchikey',     group_column = 'ion_mode',     line_colour = 'white',     fill_colour = '.group',     legend = TRUE,     labels = FALSE )  ## plot chart_plot(C,predicted(SM))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"comparison-of-standards-and-annotations","dir":"Articles","previous_headings":"","what":"Comparison of standards and annotations","title":"Annotation of mixtures of standards","text":"Now annotations standards can look overlap identifiers sources, begin assess ability annotation software annotate standards. plot venn diagram showing overlap identifiers.  can seen large number annotations present standard. false positives. next plot show similar Venn diagrams assay individually. followed 4-set Venn diagram shows overlap annotations assay matched standard.  majority standards correctly annotated HILIC_NEG assay. next plot compare overlap InChIKey source.","code":"# get processed data AN = predicted(FF) AN$tag = 'Annotations' sM = predicted(SM) sM$tag = 'Standards'  # prepare chart C = annotation_venn_chart(     factor_name = 'inchikey',     line_colour = 'white',     fill_colour = '.group' )  # plot chart_plot(C,sM,AN)+ggtitle('All assays, all sources') G =list() VV = list() for (k in c('HILIC_NEG','HILIC_POS','LIPIDS_NEG','LIPIDS_POS')) {     wf = filter_labels(         column_name = 'assay',         labels = k,         mode = 'include')      wf1 = model_apply(wf,AN)     wf$column_name = 'ion_mode'     wf2 = model_apply(wf,sM)     G[[k]]=chart_plot(C,predicted(wf2),predicted(wf1))          V = filter_venn(         factor_name = 'inchikey',         tables = list(predicted(wf1)),         levels = 'Standards/Annotations',          mode = 'include'     )     V = model_apply(V,predicted(wf2))     VV[[k]] = predicted(V)     VV[[k]]$tag = k } r1=cowplot::plot_grid(     plotlist = G,nrow = 2 ,      labels = c('HILIC_NEG','HILIC_POS','LIPIDS_NEG','LIPIDS_POS'))  cowplot::plot_grid(r1,chart_plot(C,VV),nrow=2,rel_heights = c(1,0.5)) G=list() for (k in c('CD','LS')) {     wf = filter_labels(         column_name = 'source_name',         labels = k,         mode = 'include')     wf1 = model_apply(wf,AN)          G[[k]]=chart_plot(C,sM,predicted(wf1)) } cowplot::plot_grid(plotlist = G,nrow = 1,labels = c('CD','LS'))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/annotate_mixtures.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Annotation of mixtures of standards","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] DT_0.31              dplyr_1.1.4          structToolbox_1.14.0 #> [4] ggplot2_3.4.4        MetMashR_0.1.0       struct_1.14.0        #> [7] BiocStyle_2.30.0     #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.1                   bitops_1.0-7                #>   [3] gridExtra_2.3               rlang_1.1.3                 #>   [5] magrittr_2.0.3              matrixStats_1.2.0           #>   [7] e1071_1.7-14                compiler_4.3.2              #>   [9] RSQLite_2.3.4               systemfonts_1.0.5           #>  [11] vctrs_0.6.5                 stringr_1.5.1               #>  [13] pkgconfig_2.0.3             crayon_1.5.2                #>  [15] fastmap_1.1.1               dbplyr_2.4.0                #>  [17] XVector_0.42.0              ellipsis_0.3.2              #>  [19] labeling_0.4.3              utf8_1.2.4                  #>  [21] rmarkdown_2.25              ragg_1.2.7                  #>  [23] purrr_1.0.2                 bit_4.0.5                   #>  [25] xfun_0.41                   zlibbioc_1.48.0             #>  [27] cachem_1.0.8                GenomeInfoDb_1.38.5         #>  [29] jsonlite_1.8.8              RVenn_1.1.0                 #>  [31] blob_1.2.4                  highr_0.10                  #>  [33] DelayedArray_0.28.0         R6_2.5.1                    #>  [35] bslib_0.6.1                 stringi_1.8.3               #>  [37] GenomicRanges_1.54.1        jquerylib_0.1.4             #>  [39] Rcpp_1.0.12                 bookdown_0.37               #>  [41] SummarizedExperiment_1.32.0 knitr_1.45                  #>  [43] IRanges_2.36.0              Matrix_1.6-5                #>  [45] tidyselect_1.2.0            abind_1.4-5                 #>  [47] yaml_2.3.8                  ggVennDiagram_1.5.0         #>  [49] curl_5.2.0                  lattice_0.22-5              #>  [51] tibble_3.2.1                plyr_1.8.9                  #>  [53] Biobase_2.62.0              withr_3.0.0                 #>  [55] evaluate_0.23               ontologyIndex_2.11          #>  [57] desc_1.4.3                  sf_1.0-15                   #>  [59] units_0.8-5                 proxy_0.4-27                #>  [61] BiocFileCache_2.10.1        zip_2.3.0                   #>  [63] filelock_1.0.3              pillar_1.9.0                #>  [65] BiocManager_1.30.22         MatrixGenerics_1.14.0       #>  [67] KernSmooth_2.23-22          stats4_4.3.2                #>  [69] generics_0.1.3              sp_2.1-2                    #>  [71] RCurl_1.98-1.14             S4Vectors_0.40.2            #>  [73] munsell_0.5.0               scales_1.3.0                #>  [75] class_7.3-22                glue_1.7.0                  #>  [77] tools_4.3.2                 openxlsx_4.2.5.2            #>  [79] fs_1.6.3                    cowplot_1.1.2               #>  [81] grid_4.3.2                  crosstalk_1.2.1             #>  [83] colorspace_2.1-0            GenomeInfoDbData_1.2.11     #>  [85] cli_3.6.2                   textshaping_0.3.7           #>  [87] fansi_1.0.6                 ggthemes_5.0.0              #>  [89] S4Arrays_1.2.0              gtable_0.3.4                #>  [91] sass_0.4.8                  digest_0.6.34               #>  [93] BiocGenerics_0.48.1         classInt_0.4-10             #>  [95] SparseArray_1.2.3           htmlwidgets_1.6.4           #>  [97] farver_2.1.1                memoise_2.0.1               #>  [99] htmltools_0.5.7             pkgdown_2.0.7               #> [101] lifecycle_1.0.4             httr_1.4.7                  #> [103] bit64_4.0.5"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Processing Annotations for LCMS of Daphnia samples","text":"latest versions struct MetMashR compatible current R version can installed using BiocManager. installed can activate packages usual way:","code":"# install BiocManager if not present if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # install MetMashR and dependencies BiocManager::install(\"MetMashR\") # load the packages library(struct) library(MetMashR) library(metabolomicsWorkbenchR) library(ggplot2) library(patchwork)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"import-daphina-data","dir":"Articles","previous_headings":"","what":"Import Daphina data","title":"Processing Annotations for LCMS of Daphnia samples","text":"TODO","code":"# import HILIC_POS HP = openxlsx::read.xlsx(         system.file(\"extdata/daphnia/daphnia_example.xlsx\",                 package = 'MetMashR'),         sheet='HILIC_POS',         rowNames=FALSE,         colNames=TRUE) # rename columns colnames(HP)[1] = 'id' # append assay to feature id HP$id = paste0('HILIC_POS_',HP$id) # convert some columns to numeric HP$rsd_qc=as.numeric(HP$rsd_qc) HP$rsd_sample=as.numeric(HP$rsd_sample)  # import LIPIDS_POS LP = openxlsx::read.xlsx(         system.file(\"extdata/daphnia/daphnia_example.xlsx\",                 package = 'MetMashR'),         sheet='LIPIDS_POS',         rowNames=FALSE,         colNames=TRUE) # rename columns colnames(LP)[1] = 'id' # append assay to feature id LP$id = paste0('LIPIDS_POS_',LP$id) # convert some columns to numeric LP$rsd_qc=as.numeric(LP$rsd_qc) LP$rsd_sample=as.numeric(LP$rsd_sample)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"import-and-clean-compound-discoverer-annotations","dir":"Articles","previous_headings":"","what":"Import and clean Compound Discoverer annotations","title":"Processing Annotations for LCMS of Daphnia samples","text":"implement workflow process Compound Discoverer outputs assay. Labels added aid filtering later steps. duplicate annotations select annotation highest mzCloud match score. retain annotations Full Match disregard rest. Finally match MS2 peaks MS1 peaks. need apply workflow assay. convenience store sources assay list. Now ready apply workflow sources. Note labels adding specific assay need update input parameter workflow apply source. store applied workflow list convenience.","code":"cd_workflow =      # import source     import_source() +          # add useful labels     add_labels(         labels = list(             source_name = 'CD',             assay = 'placeholder')) + # placeholder replaced later          # filter low quality     filter_labels(         column_name = 'compound_match',         labels = 'Full match',         mode = 'include') +          # resolve duplicates     combine_records(         group_by = c('compound','ion'),         default_fcn = .select_max(             max_col = 'mzcloud_score',             keep_NA = FALSE,             use_abs = TRUE         )) +      # match MS1 to MS2     mzrt_match(         variable_meta = HP,         mz_column = 'mz',         rt_column = 'rt',         ppm_window = 5,         rt_window = 20,         id_column = 'id'     ) +          # ppm difference MS1 vs library     calc_ppm_diff(         obs_mz_column = 'mz_match',         ref_mz_column = 'theoretical_mz',         out_column = 'ms1_lib_ppm_diff'     ) # prepare sources cd_sources = list(     HILIC_POS = cd_source(         source = c(             system.file(                 'extdata/daphnia/HILIC_POS_EL_CD.xlsx',                 package = 'MetMashR'),             system.file(             'extdata/daphnia/HILIC_POS_EL_CD_comp.xlsx',             package = 'MetMashR')),         sheets = c('Compounds','Compounds')     ),     LIPIDS_POS = cd_source(         source = c(             system.file(                 'extdata/daphnia/LIPIDS_POS_EL_CD.xlsx',                 package = 'MetMashR'),             system.file(             'extdata/daphnia/LIPIDS_POS_EL_CD_comp.xlsx',             package = 'MetMashR')),         sheets = c('Compounds','Compounds')     ) ) # place to store results CD = list()  # set labels cd_workflow[2]$labels$assay='HILIC_POS'  # apply workflow CD$HILIC_POS = model_apply(cd_workflow,cd_sources$HILIC_POS)  # set labels cd_workflow[2]$labels$assay='LIPIDS_POS'  # apply workflow CD$LIPIDS_POS = model_apply(cd_workflow,cd_sources$LIPIDS_POS)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"cd-quality-assurance","dir":"Articles","previous_headings":"Import and clean Compound Discoverer annotations","what":"CD Quality Assurance","title":"Processing Annotations for LCMS of Daphnia samples","text":"CD workflow computed ppm retention time differences mzCloud library used Compound Discoverer MS2 experimental data. peak distribution centre can indicative e.g. retention time m/z drift. lot annotations large difference vs library can excluded adding e.g. filter_range workflow step.  ppm retention time differences MS1 MS2 features (peaks) can also indicative analytical problems.  LIPID_POS assay (shown) 2 matches, chart informative assay.","code":"# MS2 vs library C = annotation_histogram(     factor_name = 'library_ppm_diff',     vline = c(-5,5) ) g1 = chart_plot(C,predicted(CD$HILIC_POS)) + ggtitle('MS2 vs library')  # MS1 vs library C = annotation_histogram(     factor_name = 'ms1_lib_ppm_diff',     vline = c(-5,5) ) g2 = chart_plot(C,predicted(CD$HILIC_POS)) + ggtitle('MS1 vs library')  # layout cowplot::plot_grid(g1,g2,nrow=1) # prepare chart C = annotation_histogram2d(     factor_name = c('ppm_match_diff_an','rt_match_diff'),     bins = 30 ) chart_plot(C,predicted(CD$HILIC_POS))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"import-and-clean-lipidsearch-annotations","dir":"Articles","previous_headings":"Import and clean Compound Discoverer annotations","what":"Import and clean LipidSearch annotations","title":"Processing Annotations for LCMS of Daphnia samples","text":"Similarly CD sources, implement workflow process LipidSearch outputs assay. Labels added aid filtering later steps. duplicate annotations select annotation lowest ppm difference vs library. retain LS annotations Grades B. Next prepare LipidSearch source objects: Now can apply LipidSearch workflow LipidSearch sources:","code":"# prepare workflow ls_workflow =       # import raw file     import_source() +             # add labels     add_labels(         labels = c(             assay = 'placeholder', # will be replaced later             source_name = 'LS'         ))+      # filter by grade     filter_labels(         column_name = 'Grade',         labels = c('A','B'),         mode = 'include') +          # resolve duplicates     combine_records(         group_by = c('LipidIon'),         default_fcn = .select_min(             min_col = 'library_ppm_diff',             keep_NA = FALSE,             use_abs = TRUE         )      ) +          # match MS1 to MS2     mzrt_match(         variable_meta = HP,         mz_column = 'mz',         rt_column = 'rt',         ppm_window = 5,         rt_window = 20,         id_column = 'id'     ) +          # ppm difference MS1 vs library     calc_ppm_diff(         obs_mz_column = 'mz_match',         ref_mz_column = 'theor_mass',         out_column = 'ms1_lib_ppm_diff'     ) # prepare sources ls_sources = list(     HILIC_POS = ls_source(         source =              system.file(                 'extdata/daphnia/HILIC_POS_EL_LS.txt',                 package = 'MetMashR')     ),     LIPIDS_POS = ls_source(         source =              system.file(                 'extdata/daphnia/LIPIDS_POS_EL_LS.txt',                 package = 'MetMashR')     ) ) # place to store results LS = list()  # set labels ls_workflow[2]$labels$assay='HILIC_POS'  # apply workflow LS$HILIC_POS = model_apply(ls_workflow,ls_sources$HILIC_POS)  # set labels ls_workflow[2]$labels$assay='LIPIDS_POS'  # apply workflow LS$LIPIDS_POS = model_apply(ls_workflow,ls_sources$LIPIDS_POS)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"ls-quality-assurance","dir":"Articles","previous_headings":"Import and clean Compound Discoverer annotations > Import and clean LipidSearch annotations","what":"LS Quality Assurance","title":"Processing Annotations for LCMS of Daphnia samples","text":"can assess drift m/z /retention time using histograms ppm differences vs library like .  can also check analytical issue comparing MS1 MS2 ppm retention time differences.","code":"# MS2 vs library C = annotation_histogram(     factor_name = 'library_ppm_diff',     vline = c(-5,5) ) g1 = chart_plot(C,predicted(LS$HILIC_POS)) + ggtitle('MS2 vs library')  # MS1 vs library C = annotation_histogram(     factor_name = 'ms1_lib_ppm_diff',     vline = c(-5,5) ) g2 = chart_plot(C,predicted(LS$HILIC_POS)) + ggtitle('MS1 vs library')  # layout cowplot::plot_grid(g1,g2,nrow=1) # prepare chart C = annotation_histogram2d(     factor_name = c('ppm_match_diff_an','rt_match_diff'),     bins = 30 ) chart_plot(C,predicted(LS$HILIC_POS))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"mashing-all-sources-assays","dir":"Articles","previous_headings":"","what":"Mashing all sources / assays","title":"Processing Annotations for LCMS of Daphnia samples","text":"Now imported cleaned individual sources can combine single annotation_table. table can cleaned augmented additional information required. , use normalise_strings object clean tidy metabolite names improve matches searching inchikey’s using PubChem LipidMaps APIs. use inchikey’s obtain pathway information PathBank metabolite database. Imported statistics MS1 peaks joined annotation table used quality filter MS1 peaks based assessment quality (RSD QC samples < 30). Finally, collapse table MS1 peak list possible annotations. vignette used cached results, prepare now. Next prepare workflow apply . can explore contents table. generate plots visualise number annotations source.  Next plot histogram QC-RSD values filtering, indexing relevant step workflow.  plot present bar chart different molecular classes present final table.  Finally use PubChem API generate image molecular structure one metabolites.","code":"cache1=rds_database(     source=file.path(         system.file('cached',package='MetMashR'),'cache1.rds')) cache2=rds_database(      source=file.path(         system.file('cached',package='MetMashR'),'cache2.rds')) cache3=rds_database(  source=file.path(         system.file('cached',package='MetMashR'),'cache3.rds')) cache4=rds_database(  source=file.path(         system.file('cached',package='MetMashR'),'cache4.rds')) WF =      combine_sources(         list(              predicted(CD$LIPIDS_POS),              predicted(LS$HILIC_POS),              predicted(LS$LIPIDS_POS)),         source_col = 'annotation_source',         keep_cols = '.all',         matching_columns = c(             Compound = 'compound',              Compound = 'LipidName',             Ion = 'ion',             Ion = 'LipidIon',             theoretical_mz = 'theor_mass',             LipidClass = 'Class')     ) +     normalise_strings(         search_column = 'Compound',         output_column = 'normalised_compound',         dictionary = c(             # custom dictionary             list(                 # replace \"NP\" with \"Compound NP\"                 list(                     pattern = '^NP-',                     replace = 'Compound NP-'),                 # remove terms in trailing brackets e.g.\" (ATP)\"                  list(                     pattern = '\\\\ \\\\([^\\\\)]*\\\\)$',                     replace = ''),                 # replace known abbreviations                 list(                     pattern = '3-Fluoro NNEI',                     replace = '3-Fluoro-nnei',                     fixed = TRUE),                 list(                     pattern = 'Υ-L-Glutamyl-L-glutamic acid',                     replace = 'Tyr-Glu-Glu'                 ),                 list(                     pattern = 'AcCa',                     replace = 'CAR'                 )             ),             # update tripeptides             .tripeptide_dictionary,             # remove racemic information             .racemic_dictionary,             # replace greek characters             .greek_dictionary         )     ) +     pubchem_property_lookup(         query_column = 'normalised_compound',         search_by = 'name',         property = 'InChIKey',         suffix = '_pubchem',         cache = cache1     ) +     lipidmaps_lookup(         query_column = 'normalised_compound',         context = 'compound',         context_item = 'abbrev',         output_item = 'inchi_key',         suffix = '_abbrev',         cache = cache2     )+     lipidmaps_lookup(         query_column = 'normalised_compound',         context = 'compound',         context_item = 'abbrev_chains',         output_item = 'inchi_key',         suffix = '_abbrevchains',         cache = cache3     ) +     combine_columns(         c('InChIKey_pubchem','inchi_key_abbrev','inchi_key_abbrevchains'),         output_name = 'inchikey',         source_name = 'inchikey_src',         source_tags = c('pubchem','lm_abbrev','lm_chains'),         clean = TRUE     ) +     classyfire_lookup(         query_column = 'inchikey',         output_items = '.all',         output_fields = '.all',suffix = '_cf',         cache = cache4,         delay = 5     ) +     database_lookup(         query_column = 'inchikey',         database_column = 'InChI.Key',         database = PathBank_metabolite_database(),         include = c('Pathway.Name','Pathway.Subject','Species'),         suffix = '',         not_found = NA     ) +     add_columns(         new_columns = rbind(HP,LP),         by = c('mzrt_match_id'='id')     ) +     filter_na(         column_name = 'inchikey'     ) +     combine_records(         group_by = 'mzrt_match_id',         default_fcn = .unique(             separator = ' || ')     ) +     filter_labels(         column_name = 'rsd_qc',         labels = 'NA',         mode = 'exclude'     ) +     filter_range(         column_name = 'rsd_qc',         upper_limit = 20,         lower_limit=-Inf,         equal_to=FALSE     ) WF = model_apply(WF,predicted(CD$HILIC_POS)) # pie chart of the sources of annotations C = annotation_pie_chart(     factor_name = 'source_name',     label_location = 'outside' ) chart_plot(C,predicted(WF)) + ggtitle('Annotations per source') # histogram of the rsd-qc for annotated features (before filtering) C = annotation_histogram(     factor_name = 'rsd_qc',     bins = 30,     vline = 20 ) chart_plot(C,predicted(WF[12])) +      ggtitle('MS1 peak QC-RSD',\"Features with QC-RSD<20 were removed by the workflow.\") # bar chart of the superclasses C = annotation_bar_chart(     factor_name = 'superclass.name_cf',     legend = TRUE,label_type = 'none' ) chart_plot(C,predicted(WF[10])) + ggtitle('Superclasses') # display one of the metabolite structures C = pubchem_widget(         query_column = 'normalised_compound',         row_index=1,         record_type = '3D-Conformer',         display = FALSE,         hide_title = FALSE,         height = '820px')  chart_plot(C,predicted(WF))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/daphnia_example.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Processing Annotations for LCMS of Daphnia samples","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] patchwork_1.2.0               ggplot2_3.4.4                 #> [3] metabolomicsWorkbenchR_1.12.0 MetMashR_0.1.0                #> [5] struct_1.14.0                 BiocStyle_2.30.0              #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.1                   bitops_1.0-7                #>   [3] gridExtra_2.3               rlang_1.1.3                 #>   [5] magrittr_2.0.3              matrixStats_1.2.0           #>   [7] e1071_1.7-14                compiler_4.3.2              #>   [9] RSQLite_2.3.4               systemfonts_1.0.5           #>  [11] vctrs_0.6.5                 stringr_1.5.1               #>  [13] pkgconfig_2.0.3             crayon_1.5.2                #>  [15] fastmap_1.1.1               dbplyr_2.4.0                #>  [17] XVector_0.42.0              labeling_0.4.3              #>  [19] utf8_1.2.4                  rmarkdown_2.25              #>  [21] structToolbox_1.14.0        ragg_1.2.7                  #>  [23] purrr_1.0.2                 bit_4.0.5                   #>  [25] xfun_0.41                   MultiAssayExperiment_1.28.0 #>  [27] zlibbioc_1.48.0             cachem_1.0.8                #>  [29] GenomeInfoDb_1.38.5         jsonlite_1.8.8              #>  [31] blob_1.2.4                  highr_0.10                  #>  [33] DelayedArray_0.28.0         R6_2.5.1                    #>  [35] bslib_0.6.1                 stringi_1.8.3               #>  [37] GenomicRanges_1.54.1        jquerylib_0.1.4             #>  [39] Rcpp_1.0.12                 bookdown_0.37               #>  [41] SummarizedExperiment_1.32.0 knitr_1.45                  #>  [43] IRanges_2.36.0              Matrix_1.6-5                #>  [45] tidyselect_1.2.0            abind_1.4-5                 #>  [47] yaml_2.3.8                  curl_5.2.0                  #>  [49] lattice_0.22-5              tibble_3.2.1                #>  [51] plyr_1.8.9                  Biobase_2.62.0              #>  [53] withr_3.0.0                 evaluate_0.23               #>  [55] ontologyIndex_2.11          desc_1.4.3                  #>  [57] sf_1.0-15                   units_0.8-5                 #>  [59] proxy_0.4-27                BiocFileCache_2.10.1        #>  [61] zip_2.3.0                   pillar_1.9.0                #>  [63] BiocManager_1.30.22         filelock_1.0.3              #>  [65] MatrixGenerics_1.14.0       KernSmooth_2.23-22          #>  [67] stats4_4.3.2                generics_0.1.3              #>  [69] sp_2.1-2                    RCurl_1.98-1.14             #>  [71] S4Vectors_0.40.2            munsell_0.5.0               #>  [73] scales_1.3.0                class_7.3-22                #>  [75] glue_1.7.0                  tools_4.3.2                 #>  [77] data.table_1.14.10          openxlsx_4.2.5.2            #>  [79] fs_1.6.3                    cowplot_1.1.2               #>  [81] grid_4.3.2                  colorspace_2.1-0            #>  [83] GenomeInfoDbData_1.2.11     cli_3.6.2                   #>  [85] textshaping_0.3.7           fansi_1.0.6                 #>  [87] ggthemes_5.0.0              S4Arrays_1.2.0              #>  [89] dplyr_1.1.4                 gtable_0.3.4                #>  [91] sass_0.4.8                  digest_0.6.34               #>  [93] BiocGenerics_0.48.1         classInt_0.4-10             #>  [95] SparseArray_1.2.3           farver_2.1.1                #>  [97] memoise_2.0.1               htmltools_0.5.7             #>  [99] pkgdown_2.0.7               lifecycle_1.0.4             #> [101] httr_1.4.7                  bit64_4.0.5"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Exploring the MTox700+ library","text":"latest versions struct MetMashR compatible current R version can installed using BiocManager. installed can activate packages usual way:","code":"# install BiocManager if not present if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # install MetMashR and dependencies BiocManager::install(\"MetMashR\") # load the packages library(MetMashR) library(ggplot2) library(structToolbox) library(dplyr) library(DT)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Exploring the MTox700+ library","text":"MTox700+ list toxicologically relevant metabolites derived publications, public databases relevant toxicological assays. vignette import MTox700+ database combine.merge “mash” databases explore contents ’s coverage chemical, biological toxicological space.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"importing-the-mtox700-database","dir":"Articles","previous_headings":"","what":"Importing the MTox700+ database","title":"Exploring the MTox700+ library","text":"MTox700+ database can imported using MTox700plus_database object. can imported data.frame using read_database method.","code":"# prep object MT = MTox700plus_database(     version = 'latest',     tag = 'MTox700+' )  # import df = read_database(MT)  # show contents .DT(df) # prepare workflow that uses MTox700+ as a source M = import_source()     trim_whitespace(         column_name = '.all',         which = 'both',         whitespace = '[\\\\h\\\\v]'     ) #> A \"trim_whitespace\" object #> -------------------------- #> name:          Trim whitespace #> description:   A wrapper for [`trimws()`]. Removes leading and/or trailing whitespace from character strings. #> input params:  column_names, which, whitespace  #> outputs:       updated  #> predicted:     updated #> seq_in:        data  # apply M = model_apply(M,MT)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"exploring-the-chemical-space","dir":"Articles","previous_headings":"","what":"Exploring the chemical space","title":"Exploring the MTox700+ library","text":"chemical (“metabolite”) space covered MTox700+ database can explored several ways using data included database. example, can generate images molecules using SMILES included database. generate images first 6 metabolites database.  MTox700+ database also contains information structural classification metabolites based ChemOnt (chemical taxonomy) ClassyFire (software compute taxonomy structure) [10.1186/s13321-016-0174-y]. plot show number metabolites MTox700+ database assigned “superclass” molecules.","code":"# prepare chart C = openbabel_structure(     smiles_column = 'smiles',     row_index = 1,     scale_to_fit = FALSE,     image_size = 300,     title_column = 'metabolite_name',     view_port = 400 )  # first six G = list() for (k in 1:6) {     # set row idx     C$row_index=k     # plot     G[[k]] = chart_plot(C,predicted(M))  }  # layout cowplot::plot_grid(plotlist = G,nrow=2) # initialise chart object C = annotation_bar_chart(     factor_name = 'superclass',     label_rotation = TRUE,     label_location = 'outside',     label_type = 'percent',     legend = TRUE )  # plot g = chart_plot(C,predicted(M)) + ylim(c(0,600)) +     guides(fill=guide_legend(nrow=6,title = element_blank())) +      theme(legend.position = 'bottom',legend.margin=margin())  # layout leg = cowplot::get_legend(g) cowplot::plot_grid(g+theme(legend.position = 'none'),leg,nrow=2,rel_heights = c(75,25))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"exploring-the-biological-space","dir":"Articles","previous_headings":"","what":"Exploring the biological space","title":"Exploring the MTox700+ library","text":"explore biological space covered metabolites MTox700+ need mash database additional information biological pathways metabolites part . use PathBank purpose. struct_database object PathBank already included MetMashR.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"importing-pathbank","dir":"Articles","previous_headings":"Exploring the biological space","what":"Importing PathBank","title":"Exploring the MTox700+ library","text":"MetMashR provides PathBank_metabolite_databse object import PathBank database. can choose import: “primary” database. smaller version database restricted primary pathways. “complete” database, includes pathways database. “complete” database >50mb download, unzipped >1Gb. Unzipping caching database handled [BiocFileCache]. vignette restrict “primary” PathBank database keep file sizes downloads minimum. can use database two ways: convert source “mash” sources use lookup table add information existing source. explore biological space covered MetMashR .","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"comparing-pathbank-and-mtox700","dir":"Articles","previous_headings":"Exploring the biological space","what":"Comparing PathBank and MTox700+","title":"Exploring the MTox700+ library","text":"useful visualise overlap PathBank MTox700+. MTox700+ much smaller database due curated list metabolites toxicologial relevance, PathBank general. th example import PathBank source, use venn diagram compare overlap inchikey identifiers PathBank MTox700+.  diagram shows less half metabolites MTox700+ also present PathBank database primary pathways.","code":"# object M already contains the MTox700+ database as a source  # prepare PathBank as a source P = PathBank_metabolite_database(         version = 'primary',         tag = 'PathBank' )  # import P = read_source(P)  # prepare chart C = annotation_venn_chart(     factor_name = c('inchikey','InChI.Key'),legend = FALSE,     fill_colour = '.group',     line_colour = 'white' )  # plot chart_plot(C,predicted(M),P)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"combining-mtox700-with-pathbank","dir":"Articles","previous_headings":"Exploring the biological space","what":"Combining MTox700+ with PathBank","title":"Exploring the MTox700+ library","text":"combine pathway information PathBank MTox700+ database can use PathBank lookup table based inchikeys. use database_lookup object. Note PathBank downloaded second time; automatically retrieved cache. request number columns PathBank, including pathway information additional identifiers HMBD ID KEGG ID. can now visualise e.g. subject pathways captured MTox700+ database.  can see MTox700+ largely focuses metabolites related Disease metabolism general metabolism, concomitant database curated contain metabolites relevant toxicology humans.","code":"# prepare object X = database_lookup(     query_column = 'inchikey',     database = P$data,         database_column = 'InChI.Key',         include = c(             \"PathBank.ID\",\"Pathway.Name\",\"Pathway.Subject\",\"Species\",             \"HMDB.ID\",\"KEGG.ID\",\"ChEBI.ID\",\"DrugBank.ID\",\"SMILES\"),         suffix = '' )  # apply X = model_apply(X,predicted(M)) C = annotation_bar_chart(     factor_name = 'Pathway.Subject',     label_rotation = TRUE,     label_location = 'outside',     label_type = 'percent',     legend = TRUE )  chart_plot(C,predicted(X))+ylim(c(0,17500))"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"combining-records","dir":"Articles","previous_headings":"Exploring the biological space","what":"Combining records","title":"Exploring the MTox700+ library","text":"Metabolites can appear multiple pathways. PathBank database therefore contains multiple records metabolite, relationship MTox700+ PathBank one--many. obtaining pathway information PathBank new table many rows original MTox700+ database, MTox700+ record replicated match PathBank database. e.g. importing MTox700+ number records : combing PathBank number records : Sometimes useful collapse information single record per metabolite. can use combine_records object helper functions MetMashR workflow. used .unique helper function records inchikey combined single record retaining unique values field (column). multiple unique values field combined single string using ” || ” separator. can now extract pathways associated particular metabolite. example Glycolic acid: pathways associated Glycolic acid :","code":"# Number in MTox700+ nrow(predicted(M)$data) #> [1] 1222 # Number after PathBank lookup nrow(predicted(X)$data) #> [1] 31051 # prepare object X = database_lookup(     query_column = 'inchikey',     database = P$data,         database_column = 'InChI.Key',         include = c(             \"PathBank.ID\",\"Pathway.Name\",\"Pathway.Subject\",\"Species\",             \"HMDB.ID\",\"KEGG.ID\",\"ChEBI.ID\",\"DrugBank.ID\",\"SMILES\"),         suffix = '') +      combine_records(         group_by = 'inchikey',         default_fcn = .unique(' || ')     )  # apply X = model_apply(X,predicted(M)) # get index of metabolite w = which(predicted(X)$data$metabolite_name=='Glycolic acid') # print list of pathways predicted(X)$data$Pathway.Name[w] #> [1] \"Inner Membrane Transport || Glycolate and Glyoxylate Degradation || D-Arabinose Degradation I || Ethylene Glycol Degradation\""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/exploring_mtox.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Exploring the MTox700+ library","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] DT_0.31              dplyr_1.1.4          structToolbox_1.14.0 #> [4] ggplot2_3.4.4        MetMashR_0.1.0       struct_1.14.0        #> [7] BiocStyle_2.30.0     #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.1                   bitops_1.0-7                #>   [3] gridExtra_2.3               rlang_1.1.3                 #>   [5] magrittr_2.0.3              matrixStats_1.2.0           #>   [7] e1071_1.7-14                compiler_4.3.2              #>   [9] RSQLite_2.3.4               systemfonts_1.0.5           #>  [11] vctrs_0.6.5                 stringr_1.5.1               #>  [13] pkgconfig_2.0.3             crayon_1.5.2                #>  [15] fastmap_1.1.1               dbplyr_2.4.0                #>  [17] magick_2.8.2                XVector_0.42.0              #>  [19] ellipsis_0.3.2              labeling_0.4.3              #>  [21] utf8_1.2.4                  rmarkdown_2.25              #>  [23] ragg_1.2.7                  purrr_1.0.2                 #>  [25] bit_4.0.5                   xfun_0.41                   #>  [27] zlibbioc_1.48.0             cachem_1.0.8                #>  [29] GenomeInfoDb_1.38.5         jsonlite_1.8.8              #>  [31] RVenn_1.1.0                 blob_1.2.4                  #>  [33] highr_0.10                  DelayedArray_0.28.0         #>  [35] R6_2.5.1                    bslib_0.6.1                 #>  [37] stringi_1.8.3               GenomicRanges_1.54.1        #>  [39] jquerylib_0.1.4             Rcpp_1.0.12                 #>  [41] bookdown_0.37               SummarizedExperiment_1.32.0 #>  [43] knitr_1.45                  IRanges_2.36.0              #>  [45] Matrix_1.6-5                tidyselect_1.2.0            #>  [47] abind_1.4-5                 yaml_2.3.8                  #>  [49] ggVennDiagram_1.5.0         curl_5.2.0                  #>  [51] lattice_0.22-5              tibble_3.2.1                #>  [53] Biobase_2.62.0              withr_3.0.0                 #>  [55] evaluate_0.23               ontologyIndex_2.11          #>  [57] desc_1.4.3                  sf_1.0-15                   #>  [59] units_0.8-5                 proxy_0.4-27                #>  [61] BiocFileCache_2.10.1        pillar_1.9.0                #>  [63] BiocManager_1.30.22         filelock_1.0.3              #>  [65] MatrixGenerics_1.14.0       KernSmooth_2.23-22          #>  [67] stats4_4.3.2                ChemmineOB_1.40.0           #>  [69] generics_0.1.3              sp_2.1-2                    #>  [71] RCurl_1.98-1.14             S4Vectors_0.40.2            #>  [73] munsell_0.5.0               scales_1.3.0                #>  [75] class_7.3-22                glue_1.7.0                  #>  [77] tools_4.3.2                 fs_1.6.3                    #>  [79] cowplot_1.1.2               grid_4.3.2                  #>  [81] crosstalk_1.2.1             colorspace_2.1-0            #>  [83] GenomeInfoDbData_1.2.11     cli_3.6.2                   #>  [85] textshaping_0.3.7           rsvg_2.6.0                  #>  [87] fansi_1.0.6                 ggthemes_5.0.0              #>  [89] S4Arrays_1.2.0              gtable_0.3.4                #>  [91] sass_0.4.8                  digest_0.6.34               #>  [93] BiocGenerics_0.48.1         classInt_0.4-10             #>  [95] SparseArray_1.2.3           farver_2.1.1                #>  [97] htmlwidgets_1.6.4           memoise_2.0.1               #>  [99] htmltools_0.5.7             pkgdown_2.0.7               #> [101] lifecycle_1.0.4             httr_1.4.7                  #> [103] bit64_4.0.5"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using MetMashR","text":"MetMashR R package designed facilitate cleaning, filtering combining annotations different sources. MetMashR defines “annotation source” piece software, proprietary otherwise, takes raw input analytical instrument attempts assign molecule names peaks data, usually comparison library. MetMashR primarily designed use metabolomics data measured LCMS (hence “metabolite” package name) extended include platforms (e.g. NMR, DIMS etc.), analytical approaches. vignette describe commonly used annotation workflow steps show use detail.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"statistics-in-r-using-class-templates-struct","dir":"Articles","previous_headings":"","what":"Statistics in R using Class Templates (struct)","title":"Using MetMashR","text":"objects defined MetMashR use extend class templates defined struct package. Although originally intended statistics applications, templates struct package proven adaptable many different scenarios types analysis/workflow step. use struct templates allows workflow steps applied sequence intermediate outputs retained analysis required. templates include ontology definitions object input/output parameters. makes workflows “FAIR” critical alongside FAIR data making workflows repeatable, transparent reproducible. general summary extending struct templates provided package vignette.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Using MetMashR","text":"latest versions struct MetMashR compatible current R version can installed using BiocManager. installed can activate packages usual way:","code":"# install BiocManager if not present if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # install MetMashR and dependencies BiocManager::install(\"MetMashR\") # load the packages library(struct) library(MetMashR) library(metabolomicsWorkbenchR) library(ggplot2)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"annotation-sources","dir":"Articles","previous_headings":"","what":"Annotation Sources","title":"Using MetMashR","text":"annotation_source objects dataset used MetMashR workflow steps. used structToolbox package , annotation sources used equivalently DatasetExperiment objects, except hold single data.frame metabolite annotation data. annotation_source object specific, intended general use. Instead extended two main types source: annotation_table annotation_database Although annotation_sources contain single data.frame, intended use annotation_table annotation_database different.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"annotation-tables","dir":"Articles","previous_headings":"Annotation Sources","what":"Annotation Tables","title":"Using MetMashR","text":"annotation_table defined us data.frame metabolite annotations experimentally collected data. example, provided lcms_table objects ensure m/z retention time data included data.frame LCMS data. Usually table annotations acquired application software generate annotations experimental data set. Note: aim MetMashR generate annotations. Instead aim provide tools process, filter, clean otherwise “mash” table annotations generated elsewhere.  annotation_table objects read_source method specific source. example read_source method ls_source object reads exported data file LipidSearch stripping header parsing rest file table. imported annotation_table object compatible MetMashR workflow steps.","code":"# prepare source object AT = ls_source(     source = system.file(         paste0('extdata/MTox/LS/MTox_2023_HILIC_POS.txt'),         package = 'MetMashR') )  # read source AT = read_source(AT)  # show info AT #> A \"ls_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  mz_column, rt_column  #> annotations:   62 rows x 12 columns"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"annotation-databases","dir":"Articles","previous_headings":"Annotation Sources","what":"Annotation Databases","title":"Using MetMashR","text":"annotation_database table additional metabolite meta data. example might contain identifiers /InChIKeys different metabolites. Usually (always) table used read-fashion used augment annotation_table additional information. Like sources, annotation_database objects read_source method specific database. annotation_database objects also read_database method read table directly data.frame. annotation_database objects also write_database method, allows update table disk. example, MetMashR rds_database write_database method. useful combination rest_api objects cache results reduce number requests api.","code":"# prepare source object MT = MTox700plus_database()  # read MT = read_source(MT)  # show MT #> A \"MTox700plus_database\" object #> ------------------------------- #> name:          MTox700plus_database #> description:   Imports the MTox700+ database, which is made available under the ODC Attribution License. #>                  MTox700+ is a list of toxicologically relevant metabolites derived from #>                  publications, public databases and relevant toxicological assays. #> input params:  version  #> annotations:   1222 rows x 15 columns # prepare source object MT = MTox700plus_database()  # read to data.frame df = read_database(MT)  # show .DT(df)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"cached-databases","dir":"Articles","previous_headings":"Annotation Sources","what":"Cached databases","title":"Using MetMashR","text":"annotation_database class included uses functionality provided BiocFileCache. Although used directly, many annotation_database objects provided MetMashR extend BiocFileCache_database object web resources retrieve cached locally.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"annotation-mashing","dir":"Articles","previous_headings":"","what":"Annotation Mashing","title":"Using MetMashR","text":"define annotation mashing importing, cleaning, filtering combining multiple annotation sources. useful metabolomics datasets might several assays /sources information/annotations.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"importing-sources","dir":"Articles","previous_headings":"Annotation Mashing","what":"Importing sources","title":"Using MetMashR","text":"Although annotation_sources read_source method, convenient able read source part workflow. import_source model (workflow step) allows . Note using object replace existing annotation_source really intended used first step workflow.","code":"# prepare source object AT = ls_source(     source = system.file(         paste0('extdata/MTox/LS/MTox_2023_HILIC_POS.txt'),         package = 'MetMashR') )  # prepare workflow WF = import_source()  # apply workflow to annotation source WF = model_apply(WF,AT)  # show predicted(WF) #> A \"ls_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  mz_column, rt_column  #> annotations:   62 rows x 12 columns"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"filtering-cleaning","dir":"Articles","previous_headings":"Annotation Mashing","what":"Filtering / Cleaning","title":"Using MetMashR","text":"MetMashR provides number commonly used workflow steps filter, clean process annotation sources. steps, filter_range applicable annotation source, others specific source. example mz_rt_match applicable lcms_table requires m/z retention time column present. property enforced lcms_table objects. Workflow steps use model class struct. can build workflow “adding” steps together form model sequence (model_seq). See vignettes struct details. models model sequences can applied annotation_source objects using model_apply method. example import source, apply filtering step remove records lower Grading. predicted method returns processed annotation_source applying steps workflow. Indexing can also used model sequence extract processed annotation source step workflow.","code":"# prepare source object AT = ls_source(     source = system.file(         paste0('extdata/MTox/LS/MTox_2023_HILIC_POS.txt'),         package = 'MetMashR') )  # prepare workflow WF =      # step 1 import source from file     import_source() +     # step 2 filter the \"Grade\" column to only include \"A\" and \"B\"     filter_labels(         column_name = 'Grade',         labels=c('A','B'),         mode = 'include'     )  # apply workflow to annotation source WF = model_apply(WF,AT)  # show predicted(WF) #> A \"ls_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  mz_column, rt_column  #> annotations:   29 rows x 12 columns # source after import and before filtering predicted(WF[1]) #> A \"ls_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  mz_column, rt_column  #> annotations:   62 rows x 12 columns"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"lcms-peak-matching","dir":"Articles","previous_headings":"Annotation Mashing","what":"LCMS peak matching","title":"Using MetMashR","text":"following methods restricted lcms_table sources: mz_match rt_match mz_rt_match calc_ppm_diff calc_rt_diff _match objects align features annotations comparing m/z /retention time values two sources. values fall within window considered match. cases sources might obtained experimentally. example matching MS2 peaks MS1 peaks. case window can applied sources, reflecting uncertainty values sources.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"rest-apis","dir":"Articles","previous_headings":"","what":"REST APIs","title":"Using MetMashR","text":"MetMashR provides rest_api object implements base methods query api return data.frame results. template extended include api lookup objects following: ClassyFire HMDB KEGG LipidMaps Metabolmics Workbench OPSIN PubChem Note necessarily complete wrapper functionality provided api; implemented simple wrappers useful parts e.g. querying molecular identifiers. rest_api template object includes ability cache results locally, order reduce number api queries. means rest_api object can included workflow updated results collected time. Note cache stored annotation_database object, can used workflows like annotation_source. alternative using rest_api objects every workflow create separate workflow generate local database relevant data. database can used workflows without needing query api every time workflow run.","code":"# prepare source object AT = ls_source(     source = system.file(         paste0('extdata/MTox/LS/MTox_2023_HILIC_POS.txt'),         package = 'MetMashR') )  # prepare cache TF = rds_database(     source = tempfile() )  # prepare workflow WF =      # step 1 import source from file     import_source() +     # step 2 filter the \"Grade\" column to only include \"A\" and \"B\"     filter_labels(         column_name = 'Grade',         labels=c('A','B'),         mode = 'include'     ) +     # step 3 query lipidmaps api for inchikey     lipidmaps_lookup(         query_column = 'LipidName',         context = 'compound',         context_item = 'abbrev',         output_item = 'inchi_key',         cache = TF,         suffix = ''     )  # apply workflow to annotation source WF = model_apply(WF,AT)  # show predicted(WF) #> A \"ls_source\" object #> -------------------- #> name:          LCMS table #> description:   An LCMS table extends [`annotation_table()`] to represent annotation data for an LCMS #>                  experiment. Columns representing m/z and retention time are required for an #>                  `lcms_table`. #> input params:  mz_column, rt_column  #> annotations:   39 rows x 14 columns # retrieve cache TF = read_source(TF)  # filter records with no inchikey FI =      filter_na(         column_name = 'inchi_key'     )  # apply FI = model_apply(FI,TF)  # show .DT(predicted(FI)$data)"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"dictionaries","dir":"Articles","previous_headings":"","what":"Dictionaries","title":"Using MetMashR","text":"normalise_strings object uses special list format, referred “dictionary”, provide conversion string patterns. MetMashR workflows use e.g. convert adducts standardised format across sources, tidy/clean strings using search terms rest api queries. MetMashR currently provides following dictionaries: Greek character dictionary (.greek_dictionary) convert greek characters romanised name. Racemic notation dictionary (.racemic_dictionary) remove certain types racemic notation molecule names (e.g. “(+/-)”). tripeptide dictionary (.tripeptide_dictionary) convert three-letter tripeptide abbreviations format commonly used synonym PubChem e.g. “ACD” becomes “Ala-Cys-Asp”. custom dictionary can created fly list element following fields: pattern: used input [grepl()] detect matches input pattern replace: string, function returns string, replace pattern matching string. Additional fields list item can additional inputs grepl(), fixed = TRUE. example create dictionary convert lipid abbreviations LipidMaps standard, replace underscores forward slashes: can now use dictionary workflow create new column “normalised” lipid names (hopefully) get fewer NA querying LipidMaps: can see obtained inchikey Lipids normalising lipid names. MetMashR also provides interface rgoslin package assist Lipid annotations.","code":"custom_dict = list(     list(         pattern = \"AcCa\",         replace = 'CAR',         fixed = TRUE     ),     list(         pattern = \"AEA\",         replace = 'NAE',         fixed = TRUE     ),     list(         pattern = \"_\",         replace = '/',         fixed = TRUE     ) ) # prepare workflow WF =      # step 1 import source from file     import_source() +     # step 2 filter the \"Grade\" column to only include \"A\" and \"B\"     filter_labels(         column_name = 'Grade',         labels=c('A','B'),         mode = 'include'     ) +     # step 3 normalise lipid names using the custom dictionary:     normalise_strings(         search_column = 'LipidName',         output_column = 'normalised_name',         dictionary = custom_dict       ) +     # step 4 query lipidmaps api for inchikey using the names provided by LipidSearch     lipidmaps_lookup(         query_column = 'LipidName',         context = 'compound',         context_item = 'abbrev',         output_item = 'inchi_key',         suffix = '_LipidName',         cache  = TF     ) +     # step 5 query lipidmaps api for inchikey using the names provided by LipidSearch     lipidmaps_lookup(         query_column = 'normalised_name',         context = 'compound',         context_item = 'abbrev',         output_item = 'inchi_key',         suffix = '_normalised'     )  # apply workflow to annotation source WF = model_apply(WF,AT)  #  show result table for relevant columns .DT(predicted(WF)$data[,c('LipidName','normalised_name','inchi_key_LipidName','inchi_key_normalised')])"},{"path":"https://computational-metabolomics.github.io/MetMashR/articles/using_MetMashR.html","id":"combining-records","dir":"Articles","previous_headings":"","what":"Combining Records","title":"Using MetMashR","text":"previous output LipidMaps returned multiple matches lipid. Lipid names can ambiguous regarding location double bonds, example. Sometimes useful collapse multiple entries (records) single record. MetMashR provides combine_records object number helper functions facilitate . combine records object wrapper around dplyr::reframe (formally dplyr::summarise). can provide default function apply columns, specify transformations individual columns name. Lipids example , collapse multiple records LipidName single record, collapse e.g. multiple inchikeys single string separated semi colons. can see now single record (row) LipidName, multiple inchikeys associated LipidName collapsed single entry separated semicolons. helper function .unique ensures inchikey appears collapsed string, applied default columns. .count helper function add new column counts LipidName. Note AcCa(20:4) 8 counts 4 inchikey. means AcCa(20:4) appeared twice original table, time 4 inchikey. number helper functions suit different requirements see ?combine_records_helper_functions complete list.","code":"# prepare workflow CR = combine_records(     group_by = 'LipidName',     default_fcn = .unique(separator='; '),     fcns = list(         count = .count()) )  # apply to previous output CR = model_apply(CR,predicted(WF))  # show output for relevant columns .DT(predicted(CR)$data[,c('LipidName','normalised_name','inchi_key_normalised','count')])"},{"path":"https://computational-metabolomics.github.io/MetMashR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gavin Rhys Lloyd. Author, maintainer. Ralf Johannes Maria Weber. Author.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lloyd GR, Weber RJM (2024). MetMashR: Metabolite Mashing R. R package version 0.1.0, https://computational-metabolomics.github.io/MetMashR/.","code":"@Manual{,   title = {MetMashR: Metabolite Mashing with R},   author = {Gavin Rhys Lloyd and Ralf Johannes Maria Weber},   year = {2024},   note = {R package version 0.1.0},   url = {https://computational-metabolomics.github.io/MetMashR/}, }"},{"path":"https://computational-metabolomics.github.io/MetMashR/index.html","id":"metabolite-mashing-in-r-metmashr","dir":"","previous_headings":"","what":"Metabolite Mashing with R","title":"Metabolite Mashing with R","text":"MetMashR R package can used import, clean, filter, prioritise, combine otherwise “mash” together metabolite annotations multiple sources. MetMashR extends class templates defined struct package wrap annotation workflow steps modular easy use components.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Metabolite Mashing with R","text":"install package: install development version:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"MetMashR\") if (!require(\"remotes\", quietly = TRUE))     install.packages(\"remotes\")  remotes::install_github(\"computational-metabolomics/MetMashR\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached database — BiocFileCache_database","title":"Cached database — BiocFileCache_database","text":"cached resource using BiocFileCache.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached database — BiocFileCache_database","text":"","code":"BiocFileCache_database(   source,   bfc_path = NULL,   resource_name,   bfc_fun = .cache_as_is,   import_fun = read.csv,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cached database — BiocFileCache_database","text":"source () source annotation data. bfc_path (character, NULL) BiocFileCache used cache database locally prevent unnecessary downloads. path provided BiocFileCache use location. NULL use default location (see BiocFileCache::BiocFileCache() details). default NULL. resource_name (character) name given resource cache. (see BiocFileCache::BiocFileCache() details). bfc_fun (function) function process object storing cache, e.g. store unzipped file cache instead zipped version. prevent needing unzip resource time retrieved cache, mean using space disk. default function nothing resource. See BiocFileCache::bfcdownload() details. import_fun (function) function process object retrieving cache e.g. might need unzipped importingas data.frame. function take path cached object first input return data.frame. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cached database — BiocFileCache_database","text":"  BiocFileCache_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cached database — BiocFileCache_database","text":"object makes use functionality following packages: BiocFileCache","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Cached database — BiocFileCache_database","text":"BiocFileCache_database object inherits following struct classes: BiocFileCache_database() ⭢ annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/BiocFileCache_database.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cached database — BiocFileCache_database","text":"Shepherd L, Morgan M (2023). BiocFileCache: Manage Files Across Sessions. doi:10.18129/B9.bioc.BiocFileCache https://doi.org/10.18129/B9.bioc.BiocFileCache, R package version 2.10.1, https://bioconductor.org/packages/BiocFileCache.","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Import CompDB source — CompoundDb_source","title":"Import CompDB source — CompoundDb_source","text":"Imports compounds table CompDB source annotation_source.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import CompDB source — CompoundDb_source","text":"","code":"CompoundDb_source(source, tag = \"cdb\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import CompDB source — CompoundDb_source","text":"source () source annotation data. tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"cdb\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import CompDB source — CompoundDb_source","text":"  CompoundDb_source  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import CompDB source — CompoundDb_source","text":"object makes use functionality following packages: CompoundDb","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Import CompDB source — CompoundDb_source","text":"CompoundDb_source object inherits following struct classes: CompoundDb_source() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/CompoundDb_source.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import CompDB source — CompoundDb_source","text":"Rainer J, Vicini , Salzer L, Stanstrup J, Badia J, Neumann S, Stravs M, Verri Hernandes V, Gatto L, Gibb S, Witting M (2022). \"Modular Expandable Ecosystem Metabolomics Data Annotation R.\" Metabolites, 12, 173. doi:10.3390/metabo12020173 https://doi.org/10.3390/metabo12020173, https://www.mdpi.com/2218-1989/12/2/173.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":null,"dir":"Reference","previous_headings":"","what":"MTox700plus_database — MTox700plus_database","title":"MTox700plus_database — MTox700plus_database","text":"Imports MTox700+ database, made available ODC Attribution License. MTox700+ list toxicologically relevant metabolites derived publications, public databases relevant toxicological assays.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MTox700plus_database — MTox700plus_database","text":"","code":"MTox700plus_database(   version = \"latest\",   bfc_path = NULL,   resource_name = \"MetMashR_MTox700plus\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MTox700plus_database — MTox700plus_database","text":"version (character) version number MTox700+ database import. Available versions listed : https://github.com/michabohealthscience/MTox700plus/releases. version match tag thr release e.g. \"v1.0\". convenience version = \"latest\" always retrieve recent release. prevent unecessary downloads BiocFileCache used store local copy. default \"latest\". bfc_path (character, NULL) BiocFileCache used cache database locally prevent unnecessary downloads. path provided BiocFileCache use location. NULL use default location (see BiocFileCache::BiocFileCache() details). default NULL. resource_name (character) name given resource cache. (see BiocFileCache::BiocFileCache() details). default \"MetMashR_MTox700plus\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MTox700plus_database — MTox700plus_database","text":"  MTox700plus_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MTox700plus_database — MTox700plus_database","text":"object makes use functionality following packages: BiocFileCache httr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"MTox700plus_database — MTox700plus_database","text":"MTox700plus_database object inherits following struct classes: MTox700plus_database() ⭢ BiocFileCache_database() ⭢ annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MTox700plus_database.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MTox700plus_database — MTox700plus_database","text":"Shepherd L, Morgan M (2023). BiocFileCache: Manage Files Across Sessions. doi:10.18129/B9.bioc.BiocFileCache https://doi.org/10.18129/B9.bioc.BiocFileCache, R package version 2.10.1, https://bioconductor.org/packages/BiocFileCache. Wickham H (2023). httr: Tools Working URLs HTTP. R package version 1.4.7, https://CRAN.R-project.org/package=httr. Sostare E, Lawson TN, Saunders LR, Colbourne JK, Weber RJM, Sobanski T, Viant MR (2022). \"Knowledge-Driven Approaches Create MTox700+ Metabolite Panel Predicting Toxicity.\" Toxicological Sciences, 186, 208-220. doi:10.1093/toxsci/kfac007 https://doi.org/10.1093/toxsci/kfac007.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MetFrag_source.html","id":null,"dir":"Reference","previous_headings":"","what":"LCMS table — MetFrag_source","title":"LCMS table — MetFrag_source","text":"LCMS table extends annotation_table() represent annotation data LCMS experiment. Columns representing m/z retention time required lcms_table.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MetFrag_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LCMS table — MetFrag_source","text":"","code":"MetFrag_source(source, tag = \"MetFrag\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MetFrag_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LCMS table — MetFrag_source","text":"source () source annotation data. tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"MetFrag\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MetFrag_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LCMS table — MetFrag_source","text":"  MetFrag_source  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MetFrag_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"LCMS table — MetFrag_source","text":"MetFrag_source object inherits following struct classes: MetFrag_source() ⭢ lcms_table() ⭢ annotation_table() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/MetMasheR.html","id":null,"dir":"Reference","previous_headings":"","what":"MetMasheR: Metabolite Annotation Mashing — MetMasheR","title":"MetMasheR: Metabolite Annotation Mashing — MetMasheR","text":"package merge, filter sort, organise otherwise mash together metabolite annotations. Metabolite annotations can imported multiple sources (software) combined using workflow steps based S4 class templates derived struct package.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":null,"dir":"Reference","previous_headings":"","what":"PathBank_metabolite_database — PathBank_metabolite_database","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"Imports PathBank database (https://pathbank.org/) metabolites linked pathways.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"","code":"PathBank_metabolite_database(   version = \"primary\",   bfc_path = NULL,   resource_name = \"MetMashR_PathBank\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"version (character) PathBank version. Allowed values limited following: \"\": version PatchBank database import. prevent unecessary downloads BiocFileCache used store local copy. \"complete\": complete PathBank metabolite database. \"primary\": PathBank metabolite database primary pathways . default \"primary\". bfc_path (character, NULL) BiocFileCache used cache database locally prevent unnecessary downloads. path provided BiocFileCache use location. NULL use default location (see BiocFileCache::BiocFileCache() details). default NULL. resource_name (character) name given resource cache. (see BiocFileCache::BiocFileCache() details). default \"MetMashR_PathBank\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"  PathBank_metabolite_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"object makes use functionality following packages: BiocFileCache httr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"PathBank_metabolite_database object inherits following struct classes: PathBank_metabolite_database() ⭢ BiocFileCache_database() ⭢ annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/PathBank_metabolite_database.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PathBank_metabolite_database — PathBank_metabolite_database","text":"Shepherd L, Morgan M (2023). BiocFileCache: Manage Files Across Sessions. doi:10.18129/B9.bioc.BiocFileCache https://doi.org/10.18129/B9.bioc.BiocFileCache, R package version 2.10.1, https://bioconductor.org/packages/BiocFileCache. Wickham H (2023). httr: Tools Working URLs HTTP. R package version 1.4.7, https://CRAN.R-project.org/package=httr. Wishart, S D, Li, Carin, Marcu, Ana, Badran, Hasan, Pon, Allison, Budinski, Zachary, Patron, Jonas, Lipton, Debra, Cao, Xuan, Oler, Eponine, Li, Krissa, Paccoud, Maïlys, Hong, Chelsea, Guo, C , Chan, Christopher, Wei, William, Ramirez-Gaona, Miguel (2019). \"PathBank: comprehensive pathway database model organisms.\" Nucleic Acids Research, 48, D470-D478. doi:10.1093/nar/gkz861 https://doi.org/10.1093/nar/gkz861.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns — add_columns","title":"Add columns — add_columns","text":"wrapper around dplyr::left_join. Adds columns annotation table performing left-join input data.frame (annotations left join).","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns — add_columns","text":"","code":"add_columns(new_columns, by, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns — add_columns","text":"new_columns (data.frame, annotation_database) data.frame left-joined annotation table. Can also annotation_database. (character) (named) character vector column names join e.g. c(\"\" = \"B\") (see dplyr::left_join details). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns — add_columns","text":" add_columns object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns — add_columns","text":"object makes use functionality following packages: dplyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Add columns — add_columns","text":"add_columns object inherits following struct classes: add_columns() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add columns — add_columns","text":"Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add columns — add_columns","text":"","code":"M = add_columns(       new_columns = data.frame(id=NA),       by = \"id\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add column of labels — add_labels","title":"Add column of labels — add_labels","text":"Adds new columns specified labels record.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add column of labels — add_labels","text":"","code":"add_labels(labels, replace = FALSE, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add column of labels — add_labels","text":"labels (list) named list columns label use records column. replace (logical) Replace columns. Allowed values limited following: \"TRUE\": present, new columns replace existing columns source data.frame. \"FALSE\": error thrown new columns already source data.frame. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add column of labels — add_labels","text":" add_labels object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add column of labels — add_labels","text":"object makes use functionality following packages: dplyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Add column of labels — add_labels","text":"add_labels object inherits following struct classes: add_labels() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add column of labels — add_labels","text":"Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/add_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add column of labels — add_labels","text":"","code":"M = add_labels(       labels = list(),       replace = FALSE) #> Error in validityMethod(object): object 'check' not found"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation pie chart — annotation_bar_chart","title":"Annotation pie chart — annotation_bar_chart","text":"Display pie chart labels specified column annotation_source.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation pie chart — annotation_bar_chart","text":"","code":"annotation_bar_chart(   factor_name,   label_rotation = FALSE,   label_location = \"inside\",   label_type = \"percent\",   legend = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation pie chart — annotation_bar_chart","text":"factor_name (character) name column annotation_source generate pie chart . label_rotation (logical) Rotate labels. Allowed values limited following: \"TRUE\": Rotate labels match segments. \"FALSE\": rotate labels. default FALSE. label_location (character) Label location. Allowed values limited following: \"inside\": Labels displayed inside segments. \"outside\": Labels displayed outside segments. default \"inside\". label_type (character) Label type. Allowed values limited following: \"percent\": Labels include percentage segment. \"count\": Labels include count segment. \"none\": Labels include extra information. default \"percent\". legend (logical) Display legend. Allowed values limited following: \"TRUE\": Groups indicated using legend. \"FALSE\": Groups indicated labels. default FALSE. ... Additional slots values passed struct_class. pie_rotation (numeric) number degrees rotate pie chart , clockwise. default 0. centre_radius (numeric, integer) radius centre circle. Used make \"donut\" plot. value 0 1. default 0. centre_label (NULL, character) text display centre pie chart. Mostly used donut plots centre_radius greater 0. default NULL. count_na (logical) Include number missing values pie chart. default FALSE.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation pie chart — annotation_bar_chart","text":"  annotation_pie_chart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation pie chart — annotation_bar_chart","text":"object makes use functionality following packages: ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Annotation pie chart — annotation_bar_chart","text":"annotation_pie_chart object inherits following struct classes: annotation_pie_chart() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotation pie chart — annotation_bar_chart","text":"Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_bar_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation pie chart — annotation_bar_chart","text":"","code":"M = annotation_pie_chart(       factor_name = \"V1\",       label_location = \"inside\",       label_rotation = FALSE,       legend = FALSE,       pie_rotation = 0,       label_type = \"percent\",       centre_radius = 0,       centre_label = NULL,       count_na = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_database.html","id":null,"dir":"Reference","previous_headings":"","what":"An annotation database — annotation_database","title":"An annotation database — annotation_database","text":"annotation_database annotation_source() imported data.frame contains meta data annotations. example might table molecular identifiers, associated pathways etc.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An annotation database — annotation_database","text":"","code":"annotation_database(data = data.frame(), tag = \"\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An annotation database — annotation_database","text":"data (data.frame) data.frame annotation data. default data.frame(). tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An annotation database — annotation_database","text":"  annotation_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"An annotation database — annotation_database","text":"annotation_database object inherits following struct classes: annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation histogram — annotation_histogram","title":"Annotation histogram — annotation_histogram","text":"Display histogram value specified column annotation_source.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation histogram — annotation_histogram","text":"","code":"annotation_histogram(   factor_name,   bins = 30,   bin_edge = \"grey\",   bin_fill = \"lightgrey\",   vline = NULL,   vline_colour = \"red\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation histogram — annotation_histogram","text":"factor_name (character) name column annotation_source generate histogram . bins (numeric, integer) number bins use computing histogram. default 30. bin_edge (character) colour use plotting edges bins. default \"grey\". bin_fill (character) colour use plotting bins. default \"lightgrey\". vline (numeric, NULL, list) x-axis location veritcal lines used indicate e.g. upper lower limits. Use NULL required. default NULL. vline_colour (character) colour use plotting vertical lines. default \"red\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation histogram — annotation_histogram","text":"  annotation_histogram  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation histogram — annotation_histogram","text":"object makes use functionality following packages: ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Annotation histogram — annotation_histogram","text":"annotation_histogram object inherits following struct classes: annotation_histogram() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotation histogram — annotation_histogram","text":"Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation histogram — annotation_histogram","text":"","code":"M = annotation_histogram(       factor_name = \"V1\",       bins = 30,       bin_edge = \"grey\",       bin_fill = \"lightgrey\",       vline = NULL,       vline_colour = \"red\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation 2D histogram — annotation_histogram2d","title":"Annotation 2D histogram — annotation_histogram2d","text":"Display histogram value specified columns annotation_source.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation 2D histogram — annotation_histogram2d","text":"","code":"annotation_histogram2d(   factor_name,   bins = 30,   bin_edge = \"grey\",   bin_fill = \"lightgrey\",   vline = NULL,   vline_colour = \"red\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation 2D histogram — annotation_histogram2d","text":"factor_name (character) names two columns annotation_source generate histograms . bins (numeric, integer) number bins use computing histograms. default 30. bin_edge (character) colour use plotting edges bins. default \"grey\". bin_fill (character) colour use plotting bins. default \"lightgrey\". vline (numeric, NULL, list) x-axis location lines used indicate e.g. upper lower limits. Use NULL required. 2 element list can provided set vlines factor_name. default NULL. vline_colour (character) colour use plotting vertical lines. default \"red\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation 2D histogram — annotation_histogram2d","text":"  annotation_histogram2d  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation 2D histogram — annotation_histogram2d","text":"object makes use functionality following packages: ggplot2 patchwork","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Annotation 2D histogram — annotation_histogram2d","text":"annotation_histogram2d object inherits following struct classes: annotation_histogram2d() ⭢ annotation_histogram() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotation 2D histogram — annotation_histogram2d","text":"Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org. Pedersen T (2024). patchwork: Composer Plots. R package version 1.2.0, https://CRAN.R-project.org/package=patchwork.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_histogram2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation 2D histogram — annotation_histogram2d","text":"","code":"M = annotation_histogram2d(       factor_name = \"V1\",       bins = 30,       bin_edge = \"grey\",       bin_fill = \"lightgrey\",       vline = NULL,       vline_colour = \"red\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation pie chart — annotation_pie_chart","title":"Annotation pie chart — annotation_pie_chart","text":"Display pie chart labels specified column annotation_source.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation pie chart — annotation_pie_chart","text":"","code":"annotation_pie_chart(   factor_name,   label_rotation = FALSE,   label_location = \"inside\",   label_type = \"percent\",   legend = FALSE,   pie_rotation = 0,   centre_radius = 0,   centre_label = NULL,   count_na = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation pie chart — annotation_pie_chart","text":"factor_name (character) name column annotation_source generate pie chart . label_rotation (logical) Rotate labels. Allowed values limited following: \"TRUE\": Rotate labels match segments. \"FALSE\": rotate labels. default FALSE. label_location (character) Label location. Allowed values limited following: \"inside\": Labels displayed inside segments. \"outside\": Labels displayed outside segments. default \"inside\". label_type (character) Label type. Allowed values limited following: \"percent\": Labels include percentage segment. \"count\": Labels include count segment. \"none\": Labels include extra information. default \"percent\". legend (logical) Display legend. Allowed values limited following: \"TRUE\": Groups indicated using legend. \"FALSE\": Groups indicated labels. default FALSE. pie_rotation (numeric) number degrees rotate pie chart , clockwise. default 0. centre_radius (numeric, integer) radius centre circle. Used make \"donut\" plot. value 0 1. default 0. centre_label (NULL, character) text display centre pie chart. Mostly used donut plots centre_radius greater 0. default NULL. count_na (logical) Include number missing values pie chart. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation pie chart — annotation_pie_chart","text":"  annotation_pie_chart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation pie chart — annotation_pie_chart","text":"object makes use functionality following packages: ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Annotation pie chart — annotation_pie_chart","text":"annotation_pie_chart object inherits following struct classes: annotation_pie_chart() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotation pie chart — annotation_pie_chart","text":"Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_pie_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation pie chart — annotation_pie_chart","text":"","code":"M = annotation_pie_chart(       factor_name = \"V1\",       label_location = \"inside\",       label_rotation = FALSE,       legend = FALSE,       pie_rotation = 0,       label_type = \"percent\",       centre_radius = 0,       centre_label = NULL,       count_na = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_source.html","id":null,"dir":"Reference","previous_headings":"","what":"An annotation database — annotation_source","title":"An annotation database — annotation_source","text":"annotation_database annotation_source() imported data.frame contains meta data annotations. example might table molecular identifiers, associated pathways etc.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An annotation database — annotation_source","text":"","code":"annotation_source(source = character(0), data = data.frame(), tag = \"\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An annotation database — annotation_source","text":"data (data.frame) data.frame annotation data. default data.frame(). tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An annotation database — annotation_source","text":"  annotation_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"An annotation database — annotation_source","text":"annotation_database object inherits following struct classes: annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"An annotation table — annotation_table","title":"An annotation table — annotation_table","text":"annotation_table annotation_source() imported data.frame contains measured experimental data. id_column values required uniquely indentify record (row) table (NB molecule identifiers, may present multiple records).","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An annotation table — annotation_table","text":"","code":"annotation_table(   data = data.frame(id = character(0)),   tag = \"\",   id_column = \"id\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An annotation table — annotation_table","text":"data (data.frame) data.frame annotation data. default data.frame(id = character(0)). tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"\". id_column (character) column name annotation data.frame containing row identifers. NULL generated automatically. default \"id\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An annotation table — annotation_table","text":"  annotation_table  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_table.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"An annotation table — annotation_table","text":"annotation_table object inherits following struct classes: annotation_table() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation venn chart — annotation_venn_chart","title":"Annotation venn chart — annotation_venn_chart","text":"Display venn diagram labels present two annotation_sources.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation venn chart — annotation_venn_chart","text":"","code":"annotation_venn_chart(   factor_name,   group_column = NULL,   fill_colour = \"white\",   line_colour = \"black\",   labels = TRUE,   legend = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation venn chart — annotation_venn_chart","text":"factor_name (character) name column(s) annotation_source generate chart . seven columns can compared single annotation_source. group_column (character, NULL) name column annotation_source create groups Venn diagram. parameter ignored multiple input tables, table considered group. parameter also ignored one factor_name provided, column considered group. default NULL. fill_colour (character) line colour groups format compatible ggplot e.g. \"black\" \"#000000\". Special case \".group\" sets colour based group label \"none\" fill groups. default \"white\". line_colour (character) line colour groups format compatible ggplot e.g. \"black\" \"#000000\". Special case \".group\" sets colour based group label, \".none\" display lines. default \"black\". labels (logical) Group labels. Allowed values limited following: \"TRUE\": Include group labels plot. \"FALSE\": inlude group labels plot. default TRUE. legend (logical) Legend. Allowed values limited following: \"TRUE\": Include legend plot. \"FALSE\": inlude legend plot. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation venn chart — annotation_venn_chart","text":"  annotation_venn_chart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation venn chart — annotation_venn_chart","text":"object makes use functionality following packages: RVenn ggVennDiagram","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Annotation venn chart — annotation_venn_chart","text":"annotation_venn_chart object inherits following struct classes: annotation_venn_chart() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotation venn chart — annotation_venn_chart","text":"Akyol T (2019). RVenn: Set Operations Many Sets. R package version 1.1.0, https://CRAN.R-project.org/package=RVenn. Gao C (2023). ggVennDiagram: 'ggplot2' Implement Venn Diagram. R package version 1.4.9, https://CRAN.R-project.org/package=ggVennDiagram.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/annotation_venn_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation venn chart — annotation_venn_chart","text":"","code":"M = annotation_venn_chart(       factor_name = \"V1\",       line_colour = \".group\",       fill_colour = \".group\",       labels = FALSE,       legend = FALSE,       group_column = NULL)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_ppm_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ppm difference — calc_ppm_diff","title":"Calculate ppm difference — calc_ppm_diff","text":"Calculate ppm difference two columns annotation_table. e.g. comparing observed m/z theortical ones.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_ppm_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ppm difference — calc_ppm_diff","text":"","code":"calc_ppm_diff(   obs_mz_column,   ref_mz_column,   out_column,   check_names = \"unique\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_ppm_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ppm difference — calc_ppm_diff","text":"obs_mz_column (character) Column name annotation_table containing observed m/z values. ref_mz_column (character) Column name annotation table containing . out_column (character) Column name annotation table store computed ppm differences. check_names (character) Check names. Allowed values limited following: \"stop\": output column already exists error thrown. \"unique\": output column already exists unique column name generated. \"replace\": output column already exists replaced. default \"unique\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_ppm_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ppm difference — calc_ppm_diff","text":" calc_ppm_diff object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_ppm_diff.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Calculate ppm difference — calc_ppm_diff","text":"calc_ppm_diff object inherits following struct classes: calc_ppm_diff() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_ppm_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ppm difference — calc_ppm_diff","text":"","code":"M = calc_ppm_diff(       obs_mz_column = character(0),       ref_mz_column = \"reference (theoretical) m/z values.\",       out_column = character(0),       check_names = \"unique\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_rt_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RT difference — calc_rt_diff","title":"Calculate RT difference — calc_rt_diff","text":"Calculate RT difference two RT values","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_rt_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RT difference — calc_rt_diff","text":"","code":"calc_rt_diff(   obs_rt_column,   ref_rt_column,   out_column,   check_names = \"unique\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_rt_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate RT difference — calc_rt_diff","text":"obs_rt_column (character) Column name annotation table containing observed (measured) RT values. ref_rt_column (character) Column name annotation table containing reference (theoretical) RT values. out_column (character) Column name annotation table store computed RT differences. check_names (character) Check names. Allowed values limited following: \"stop\": output column already exists error thrown. \"unique\": output column already exists unique column name generated. \"replace\": output column already exists replaced. default \"unique\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_rt_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate RT difference — calc_rt_diff","text":" calc_rt_diff object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_rt_diff.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Calculate RT difference — calc_rt_diff","text":"calc_rt_diff object inherits following struct classes: calc_rt_diff() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/calc_rt_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate RT difference — calc_rt_diff","text":"","code":"M = calc_rt_diff(       obs_rt_column = character(0),       ref_rt_column = character(0),       out_column = character(0),       check_names = \"unique\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/cd_source.html","id":null,"dir":"Reference","previous_headings":"","what":"LCMS table — cd_source","title":"LCMS table — cd_source","text":"LCMS table extends annotation_table() represent annotation data LCMS experiment. Columns representing m/z retention time required lcms_table.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/cd_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LCMS table — cd_source","text":"","code":"cd_source(source, sheets = c(1, 1), tag = \"CD\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/cd_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LCMS table — cd_source","text":"source (character) path Compound Discoverer Excel files import. compounds isomers file included, order. sheets (character, numeric, integer) name index sheets read source file(s). sheet provided input file. default c(1, 1). tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"CD\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/cd_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LCMS table — cd_source","text":"  cd_source  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/cd_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"LCMS table — cd_source","text":"cd_source object inherits following struct classes: cd_source() ⭢ lcms_table() ⭢ annotation_table() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/cd_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LCMS table — cd_source","text":"","code":"M = cd_source(       sheets = c(2, 2),       mz_column = \"mz\",       rt_column = \"rt\",       id_column = \"id\",       tag = character(0),       data = data.frame(id=NA),       source = character(0)) #> Error in validObject(.Object): invalid class “cd_source” object: 1: The following columns are missing from the data.frame: \"mz\" ,\"rt\" #> invalid class “cd_source” object: 2: The column named in the \"mz_column\" parameter must be present in the data.frame. #> invalid class “cd_source” object: 3: The column named in the \"rt_column\" parameter must be present in the data.frame."},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/check_for_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for columns in an annotation_source — check_for_columns","title":"Check for columns in an annotation_source — check_for_columns","text":"method checks presence columns name annotation_source(). returns TRUE present, vector messages indicating columns missing data.frame. used MetMashR ensure validity certain objects.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/check_for_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for columns in an annotation_source — check_for_columns","text":"","code":"check_for_columns(obj, ..., msg = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/check_for_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for columns in an annotation_source — check_for_columns","text":"obj annotation_source() object ... column names check msg TRUE/FALSE indicates whether return message columns missing. msg = FALSE function returns FALSE columns present.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/check_for_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for columns in an annotation_source — check_for_columns","text":"logical columns present, vector messages requested.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/check_for_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for columns in an annotation_source — check_for_columns","text":"","code":"# test if column present AT = annotation_source(data.frame(id = character(0))) #> Error in validObject(obj): invalid class “entity” object: ANY: class of value must match \"type\" check_for_columns(AT,'id') # TRUE #> Error in h(simpleError(msg, call)): error in evaluating the argument 'obj' in selecting a method for function 'check_for_columns': object 'AT' not found check_for_columns(AT,'cake') # FALSE #> Error in h(simpleError(msg, call)): error in evaluating the argument 'obj' in selecting a method for function 'check_for_columns': object 'AT' not found  # return a message if missing check_for_columns(AT,'cake',msg = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'obj' in selecting a method for function 'check_for_columns': object 'AT' not found"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Query ClassyFire database — classyfire_lookup","title":"Query ClassyFire database — classyfire_lookup","text":"Queries ClassyFire database inchikey obtain chemical ontology information.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query ClassyFire database — classyfire_lookup","text":"","code":"classyfire_lookup(   query_column,   output_items = \"kingdom\",   output_fields = \"name\",   suffix = \"_cf\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query ClassyFire database — classyfire_lookup","text":"query_column (character) name column annotation table containing values search api call. output_items (character) names items return results search. Can include number \"kingdom\", \"superclass\", \"class\", \"subclass\", \"direct_parent\", \"intermediate_nodes\", \"substituents\", \"smiles\", \"molecular_framework\", \"description\", \"ancestors\", \"predicted_chebi_terms\". Keyword \".\" may used return items. default \"kingdom\". output_fields (character) names fields return output_item. Can include \"name\", \"description\", \"chemont_id\" \"url\". Keyword \".\" may used return fields. items fields, output_category ignored. default \"name\". suffix (character) suffix appended column names returned result. default \"_cf\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query ClassyFire database — classyfire_lookup","text":" classyfire_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query ClassyFire database — classyfire_lookup","text":"object makes use functionality following packages: dplyr httr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Query ClassyFire database — classyfire_lookup","text":"classyfire_lookup object inherits following struct classes: classyfire_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Query ClassyFire database — classyfire_lookup","text":"Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr. Wickham H (2023). httr: Tools Working URLs HTTP. R package version 1.4.7, https://CRAN.R-project.org/package=httr.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/classyfire_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query ClassyFire database — classyfire_lookup","text":"","code":"M = classyfire_lookup(       output_items = \"kingdom\",       output_fields = \"name\",       base_url = \"http://classyfire.wishartlab.com/entities\",       url_template = \"<base_url>/<query_column>.json\",       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several columns into a single column. — combine_columns","title":"Combine several columns into a single column. — combine_columns","text":"Several columns merged single column. multiple columns contain overlapping values priority can given columns earlier list.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several columns into a single column. — combine_columns","text":"","code":"combine_columns(   column_names,   output_name,   source_name,   source_tags = column_names,   clean = TRUE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several columns into a single column. — combine_columns","text":"column_names (character) name(s) column(s) combined. output_name (character) name new column. source_name (character) column name used indicate merged values originated. source_tags (character) tags used identify source item new column. tag provided column_name. default column name used. clean (logical) Clean old columns. Allowed values limited following: \"TRUE\": named columns removed combined. \"FALSE\": named columns retained combined. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several columns into a single column. — combine_columns","text":" combine_columns object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_columns.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Combine several columns into a single column. — combine_columns","text":"combine_columns object inherits following struct classes: combine_columns() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several columns into a single column. — combine_columns","text":"","code":"M = combine_columns(       column_names = \"V1\",       output_name = \"\",       clean = FALSE,       source_name = \"source_name\",       source_tags = \"x\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine annotation records (rows) — combine_records","title":"Combine annotation records (rows) — combine_records","text":"Combine annotation records (rows) based key. records key combined. number helper functions provided common approaches merging records.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine annotation records (rows) — combine_records","text":"","code":"combine_records(   group_by,   default_fcn = .collapse(separator = \" || \"),   fcns = list(),   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine annotation records (rows) — combine_records","text":"group_by (character) column used key grouping records. default_fcn (function) default function use summarising columns combining records specific function provided fcns. default .collapse(separator = \" || \"). fcns (list) named list functions use summarising named columns combining records. Names correspond columns annotation table. default list(). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine annotation records (rows) — combine_records","text":" combine_records object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine annotation records (rows) — combine_records","text":"object makes use functionality following packages: dplyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Combine annotation records (rows) — combine_records","text":"combine_records object inherits following struct classes: combine_records() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combine annotation records (rows) — combine_records","text":"Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr. Lloyd GR, Jankevics , Weber RJM (2020). \"struct: R/Bioconductor-based framework standardized metabolomics data analysis beyond.\" Bioinformatics, 36(22-23), 5551-5552.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine annotation records (rows) — combine_records","text":"","code":"M = combine_records(       fcns = list(),       group_by = character(0),       default_fcn = function(){})"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records_helper_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine records helper functions — combine_records_helper_functions","title":"Combine records helper functions — combine_records_helper_functions","text":"page documents helper functions use combine_records().","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records_helper_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine records helper functions — combine_records_helper_functions","text":"","code":".mode(ties = FALSE, na.rm = TRUE)  .mean()  .median()  .collapse(separator, na_string = \"NA\")  .select_max(max_col, use_abs = FALSE, keep_NA = FALSE)  .select_min(min_col, use_abs = FALSE, keep_NA = FALSE)  .select_match(match_col, search_col, separator, na_string = \"NA\")  .select_exact(match_col, match, separator, na_string = \"NA\")  .unique(separator, na_string = \"NA\", digits = 6)  .prioritise(match_col, priority, separator, no_match = NA, na_string = \"NA\")  .nothing()  .count()  .select_grade(grade_col, keep_NA = FALSE, upper_case = TRUE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records_helper_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine records helper functions — combine_records_helper_functions","text":"ties (logical) TRUE records matching tied groups returned. Otherwise first record returned. na.rm (logical) TRUE NA ignored separator (character, NULL) !NULL string used collapse matches priority na_string (character) NA values replaced string max_col (character) column name search maximum value. use_abs (logical) TRUE sign values ignored. keep_NA (logical) TRUE keeps records NA values min_col (character) column name search minimum value. match_col (character) column labels prioritise search_col (character) name column use reference locating values matching column. match (character) value search matching column. digits (numeric) number digits use converting numerical values characters determining values unique. priority (character) list labels priority order no_match (character, NULL) !NULL  annotations matching priority labels replaced value grade_col (character) name column containing grades upper_case (logical) TRUE grades compared upper case letters determine ordering, otherwise lower case.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records_helper_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine records helper functions — combine_records_helper_functions","text":"function use combine_records()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records_helper_functions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Combine records helper functions — combine_records_helper_functions","text":".mode(): returns common value, excluding NA. ties == TRUE tied values returned, otherwise first value sorted unique list returned (equal min numeric). na.rm = FALSE NA included searching modal value placed last ties = FALSE (values returned preferentially NA). .mean(): calculates mean value, excluding NA na.rm = TRUE .median(): calculates median value, excluding NA na.rm = TRUE .collapse(): collapses multiple matching records single string using provided separator. .select_max(): selects record based index maximum value another column. .select_min(): selects record based index minimum second column. .select_match(): returns records based indices identical matches second column collapses useing provided separator. .select_exact(): returns records based index identical value matching match parameter within current column, collapses using provided separator necessary. .unique(): collapses set records set unique values using provided separator. digits can provided numeric columns control precision used determining unique values. .prioritise(): reduces set annotations prioritising values according input. multiple matches priority collapsed using separator. .nothing(): pass-function allow annotation table columns remain unchanged. .count(): adds new column indicating number annotations match given grouping variable. .select_grade(): returns records based index best grade second list. best grade defined \"\" upper_case = TRUE \"\" upper_case = FALSE worst grade \"Z\" \"z\". non-exact matches character LETTERS letters replaced NA.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_records_helper_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine records helper functions — combine_records_helper_functions","text":"","code":"# Select matching records M = combine_records(         group_by = 'example',         default_fcn = .select_match(             match_col = 'match_column',             match = 'find_me',             separator = ', ',             na_string = 'NA')         ) #> Error in .select_match(match_col = \"match_column\", match = \"find_me\",     separator = \", \", na_string = \"NA\"): unused argument (match = \"find_me\")  # Collapse unique values M = combine_records(         group_by = 'example',         default_fcn = .unique(             digits = 6,             separator = ', ',             na_string = 'NA')         )  # Prioritise by source M = combine_records(         group_by = 'InChiKey',         default_fcn = .prioritise(              match_col = 'source',              priority = c('CD','LS'),              separator = '  || ')     )  # Do nothing to all columns M = combine_records(         group_by = 'InChiKey',         default_fcn = .nothing()     )  # Add a column with the number of records with a matching inchikey M = combine_records(         group_by = 'InChiKey',         fcns = list(             count = .count()         ))  # Select annotation with highest (best) grade M = combine_records(         group_by = 'InChiKey',         default_fcn = .select_grade(             grade_col = 'grade',             keep_NA = FALSE,             upper_case = TRUE         ))"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine annotation sources (tables) — combine_sources","title":"Combine annotation sources (tables) — combine_sources","text":"Annotation tables joined matching columns merged.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine annotation sources (tables) — combine_sources","text":"","code":"combine_sources(   source_list,   matching_columns = NULL,   keep_cols = NULL,   tag_ids = FALSE,   source_col = \"annotation_source\",   exclude_cols = NULL,   tag = \"combined\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine annotation sources (tables) — combine_sources","text":"source_list (list) list annotation sources combined. matching_columns (character, NULL) named vector columns names created merging columns individual sources. e.g. c(\"hello\"=\"world\") rename \"hello\" column \"world\" found tables. default NULL. keep_cols (character, NULL) list column names keep combined table (padded NA) detected one input tables. Special case \".\" keep columns tables. default NULL. tag_ids (logical) Create column new identifiers annotation merging id source annotation tag. e.g.annotation id = \"A1\" source tagged \"XY\" given new id \"A1_XY\" prevent duplicate IDs multiple sources. default FALSE. source_col (character) column name created contain tag indicate source annotation originated . default \"annotation_source\". exclude_cols (NULL, character) Column names excluded merged annotation table. Note applied keep_cols. default NULL. tag (character) tag given newly combined table. default \"combined\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine annotation sources (tables) — combine_sources","text":" combine_sources object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_sources.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Combine annotation sources (tables) — combine_sources","text":"combine_sources object inherits following struct classes: combine_sources() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/combine_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine annotation sources (tables) — combine_sources","text":"","code":"M = combine_sources(       source_list = list(),       matching_columns = NULL,       keep_cols = NULL,       tag_ids = FALSE,       source_col = \"annotation_source\",       exclude_cols = NULL,       tag = \"combined\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/concatenate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate columns — concatenate_columns","title":"Concatenate columns — concatenate_columns","text":"wrapper paste() interaction(). Combines values two columns row-wise.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/concatenate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate columns — concatenate_columns","text":"","code":"concatenate_columns(   column_names,   separator = \"_\",   prefix = NULL,   suffix = NULL,   output_column = \"concatenated\",   clean = TRUE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/concatenate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate columns — concatenate_columns","text":"column_names (character) column name(s) annotation_source concatenate. separator (character) string placed two joined. default \"_\". prefix (character, NULL) string placed start concatenated strings. default NULL. suffix (character, NULL) string placed end concatenated strings. default NULL. output_column (character) name column store concatenated values . default \"concatenated\". clean (logical) Clean old columns. Allowed values limited following: \"TRUE\": named columns removed combined. \"FALSE\": named columns retained combined. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/concatenate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate columns — concatenate_columns","text":" concatenate_columns object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/concatenate_columns.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Concatenate columns — concatenate_columns","text":"concatenate_columns object inherits following struct classes: concatenate_columns() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/concatenate_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate columns — concatenate_columns","text":"","code":"M = concatenate_columns(       column_names = \"V1\",       separator = \"_\",       output_column = \"concatenated\",       clean = FALSE,       prefix = NULL,       suffix = NULL)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"ID lookup by database — database_lookup","title":"ID lookup by database — database_lookup","text":"Search database (data.frame) annotation matches based values specified column.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ID lookup by database — database_lookup","text":"","code":"database_lookup(   query_column,   database_column,   database,   include = NULL,   suffix = NULL,   not_found = NA,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ID lookup by database — database_lookup","text":"query_column (character) annotation table column name use reference searching database e.g. \"HMBD_ID\". database_column (character) database column search matches values annoation_column. database (data.frame, annotation_database) database searched. Can data.frame annotation_database object. include (character, NULL) name database columns added annotations. NULL, columns retained. default NULL. suffix (character, NULL) string appended column names database. Used distinguish columns different databases identical column names.suffix = NULL column names changed. default NULL. not_found (character, numeric, logical, NULL) returned value matches. default NA. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ID lookup by database — database_lookup","text":" database_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ID lookup by database — database_lookup","text":"object makes use functionality following packages: dplyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"ID lookup by database — database_lookup","text":"database_lookup object inherits following struct classes: database_lookup() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ID lookup by database — database_lookup","text":"Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/database_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ID lookup by database — database_lookup","text":"","code":"M = database_lookup(       query_column = \"V1\",       database_column = \"\",       database = data.frame(id=NA),       include = NULL,       suffix = NULL,       not_found = NULL)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-cache_as_is.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache file with no changes using BiocFileCache — .cache_as_is","title":"Cache file with no changes using BiocFileCache — .cache_as_is","text":"helper function use BiocFileCache objects. Using copy file directly cache without making changes.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-cache_as_is.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache file with no changes using BiocFileCache — .cache_as_is","text":"","code":".cache_as_is(from, to)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-cache_as_is.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache file with no changes using BiocFileCache — .cache_as_is","text":"incoming path outgoing path","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-cache_as_is.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cache file with no changes using BiocFileCache — .cache_as_is","text":"TRUE successful","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-cache_as_is.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache file with no changes using BiocFileCache — .cache_as_is","text":"","code":"M = BiocFileCache_database(     path = tempfile(),     resource_name = 'example',     bfc_fun=.cache_as_is) #> Error in BiocFileCache_database(path = tempfile(), resource_name = \"example\",     bfc_fun = .cache_as_is): argument \"source\" is missing, with no default"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-greek_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Greek dictionary — .greek_dictionary","title":"Greek dictionary — .greek_dictionary","text":"dictionary converting Greek characters Romanised names. intended use normalise_strings() object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-greek_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Greek dictionary — .greek_dictionary","text":"","code":".greek_dictionary"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-greek_dictionary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Greek dictionary — .greek_dictionary","text":"object class list length 48.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-greek_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Greek dictionary — .greek_dictionary","text":"dictionary use normalise_strings()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-greek_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Greek dictionary — .greek_dictionary","text":"","code":"M = normalise_strings(     search_column ='example',      output_column = 'result',     dictionary = .greek_dictionary )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-racemic_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Racemic dictionary — .racemic_dictionary","title":"Racemic dictionary — .racemic_dictionary","text":"dictionary removes racemic properties molecule names. intended use normalise_strings() object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-racemic_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Racemic dictionary — .racemic_dictionary","text":"","code":".racemic_dictionary"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-racemic_dictionary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Racemic dictionary — .racemic_dictionary","text":"object class list length 5.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-racemic_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Racemic dictionary — .racemic_dictionary","text":"dictionary use normalise_strings()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-racemic_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Racemic dictionary — .racemic_dictionary","text":"","code":"M = normalise_strings(     search_column ='example',      output_column = 'result',     dictionary = .racemic_dictionary )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-tripeptide_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Tripeptide dictionary — .tripeptide_dictionary","title":"Tripeptide dictionary — .tripeptide_dictionary","text":"dictionary converting tripeptides encoded using single letter IUPAC codes use three letter codes amino acids separated hyphens. e.g. INK becomes Ile-Asn-Lys","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-tripeptide_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tripeptide dictionary — .tripeptide_dictionary","text":"","code":".tripeptide_dictionary"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-tripeptide_dictionary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tripeptide dictionary — .tripeptide_dictionary","text":"object class list length 1.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-tripeptide_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tripeptide dictionary — .tripeptide_dictionary","text":"dictionary use normalise_strings()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-tripeptide_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tripeptide dictionary — .tripeptide_dictionary","text":"","code":"M = normalise_strings(     search_column ='example',      output_column = 'result',     dictionary = .amino_acid_dictionary ) #> Error in eval(expr, envir, enclos): object '.amino_acid_dictionary' not found"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-unzip.html","id":null,"dir":"Reference","previous_headings":"","what":"Unzip file before caching with BiocFileCache_database — .unzip","title":"Unzip file before caching with BiocFileCache_database — .unzip","text":"helper function use BiocFileCache_database() objects. Using bfc_fun input object unzip downloaded resource temporary folder storing cache.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-unzip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unzip file before caching with BiocFileCache_database — .unzip","text":"","code":".unzip(from, to)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-unzip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unzip file before caching with BiocFileCache_database — .unzip","text":"incoming path outgoing path","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-unzip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unzip file before caching with BiocFileCache_database — .unzip","text":"TRUE successful","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/dot-unzip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unzip file before caching with BiocFileCache_database — .unzip","text":"","code":"M = BiocFileCache_database(     path = tempfile(),     resource_name = 'example',     bfc_fun=.unzip) #> Error in BiocFileCache_database(path = tempfile(), resource_name = \"example\",     bfc_fun = .unzip): argument \"source\" is missing, with no default"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by factor labels — filter_labels","title":"Filter by factor labels — filter_labels","text":"Removes (includes) annotations named column excludes (includes) specified labels.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by factor labels — filter_labels","text":"","code":"filter_labels(   column_name,   labels,   mode = \"exclude\",   perl = FALSE,   fixed = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by factor labels — filter_labels","text":"column_name (character) column name filter. labels (character) labels filter . Uses [grepl()] regex accepted e.g. partial matching labels. mode (character) Filter mode. Allowed values limited following: \"exclude\": specified labels removed annotation table. \"include\": specified labels retained annotation table. default \"exclude\". perl (logical) Use Perl-compatible regex. default FALSE. fixed (logical) Use exact matching. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by factor labels — filter_labels","text":" filter_labels object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_labels.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter by factor labels — filter_labels","text":"filter_labels object inherits following struct classes: filter_labels() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by factor labels — filter_labels","text":"","code":"M = filter_labels(       column_name = \"V1\",       labels = \"\",       mode = \"exclude\",       perl = FALSE,       fixed = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by range — filter_na","title":"Filter by range — filter_na","text":"Removes annotations names column  greater upper limit less lower limit.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by range — filter_na","text":"","code":"filter_na(column_name, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by range — filter_na","text":"column_name (character) column name filter. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by range — filter_na","text":" filter_na object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_na.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter by range — filter_na","text":"filter_na object inherits following struct classes: filter_na() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by range — filter_na","text":"","code":"M = filter_na(       column_name = \"V1\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by range — filter_range","title":"Filter by range — filter_range","text":"Removes annotations names column  greater upper limit less lower limit.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by range — filter_range","text":"","code":"filter_range(   column_name,   upper_limit = Inf,   lower_limit = -Inf,   equal_to = TRUE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by range — filter_range","text":"column_name (character) column name filter. upper_limit (numeric, integer, function) upper limit used filtering. Can value, function computes value (e.g. mean). default Inf. lower_limit (numeric, integer, function) lower limit used filtering. Can value, function computes value (e.g. mean). default -Inf. equal_to (logical) Equal limits. Allowed values limited following: \"TRUE\": Greater/less equal limits excluded. \"FALSE\": Greater/less limits excluded. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by range — filter_range","text":" filter_range object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_range.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter by range — filter_range","text":"filter_range object inherits following struct classes: filter_range() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by range — filter_range","text":"","code":"M = filter_range(       column_name = \"V1\",       upper_limit = Inf,       lower_limit = -Inf,       equal_to = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_venn.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by factor levels — filter_venn","title":"Filter by factor levels — filter_venn","text":"Removes (includes) annotations named column excludes (includes) specified levels.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_venn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by factor levels — filter_venn","text":"","code":"filter_venn(   factor_name,   group_column = NULL,   tables = NULL,   levels,   mode = \"exclude\",   perl = FALSE,   fixed = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_venn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by factor levels — filter_venn","text":"factor_name (character) name column(s) annotation_source generate chart . seven columns can compared single annotation_source. group_column (character, NULL) name column annotation_source create groups Venn diagram. parameter ignored !.null(tables), table considered group. parameter also ignored one factor_name provided, column considered group. default NULL. tables (list, NULL) list annotation_sources generate venn groups . table interest table coming model_apply set tables = NULL use group_column. default NULL. levels (character) venn diagram levels filter . mode (character) Filter mode. Allowed values limited following: \"exclude\": specified levels removed annotation table. \"include\": specified levels retained annotation table. default \"exclude\". perl (logical) Use Perl-compatible regex. default FALSE. fixed (logical) Use exact matching. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_venn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by factor levels — filter_venn","text":" filter_venn object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_venn.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter by factor levels — filter_venn","text":"filter_venn object inherits following struct classes: filter_venn() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/filter_venn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by factor levels — filter_venn","text":"","code":"M = filter_venn(       factor_name = \"V1\",       group_column = NULL,       tables = NULL,       levels = \"\",       mode = \"exclude\",       perl = FALSE,       fixed = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Compound ID lookup via pubchem — hmdb_lookup","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"Requests HMBD records based HMDB identifiers.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"","code":"hmdb_lookup(query_column, suffix = \"_hmdb\", output = \"inchikey\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"query_column (character) name column annotation table containing values search api call. suffix (character) suffix appended column names returned result. default \"_hmdb\". output (character) value returned HMDB xml. default \"inchikey\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compound ID lookup via pubchem — hmdb_lookup","text":" hmdb_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"object makes use functionality following packages: XML","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"hmdb_lookup object inherits following struct classes: hmdb_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"Temple Lang D (2023). XML: Tools Parsing Generating XML Within R S-Plus. R package version 3.99-0.16, https://CRAN.R-project.org/package=XML.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/hmdb_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compound ID lookup via pubchem — hmdb_lookup","text":"","code":"M = hmdb_lookup(       output = \"inchikey\",       base_url = \"http://www.hmdb.ca/metabolites\",       url_template = \"<base_url>/<query_column>.xml\",       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/id_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"id counts — id_counts","title":"id counts — id_counts","text":"Adds number times identical identifier present record.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/id_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"id counts — id_counts","text":"","code":"id_counts(id_column, count_column = \"id_counts\", count_na = TRUE, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/id_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"id counts — id_counts","text":"id_column (character) Column name variable ids variable_meta. count_column (character) name new column store counts . default \"id_counts\". count_na (logical) Count NA. Allowed values limited following: \"TRUE\": Report number NA. \"FALSE\": report number NA. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/id_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"id counts — id_counts","text":" id_counts object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/id_counts.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"id counts — id_counts","text":"id_counts object inherits following struct classes: id_counts() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/id_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"id counts — id_counts","text":"","code":"M = id_counts(       id_column = character(0),       count_column = character(0),       count_na = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/import_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Import_source — import_source","title":"Import_source — import_source","text":"wrapper read_source() can used annotation workflow import annotation source.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/import_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import_source — import_source","text":"","code":"import_source(...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/import_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import_source — import_source","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/import_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import_source — import_source","text":" import_source object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/import_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Import_source — import_source","text":"import_source object inherits following struct classes: import_source() ⭢ model() ⭢ struct_class()","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/is_writable.html","id":null,"dir":"Reference","previous_headings":"","what":"Is database writable — is_writable","title":"Is database writable — is_writable","text":"function returns TRUE database designed use read write mode.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/is_writable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is database writable — is_writable","text":"","code":"is_writable(obj, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/is_writable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is database writable — is_writable","text":"obj annotation_database object","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/is_writable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is database writable — is_writable","text":"TRUE database writable; FALSE otherwise. method checks .writable slot object file properties.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/is_writable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is database writable — is_writable","text":"","code":"M = annotation_database() is.writable(M) #> Error in is.writable(M): could not find function \"is.writable\""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to or from kegg identifiers — kegg_lookup","title":"Convert to or from kegg identifiers — kegg_lookup","text":"Searches Kegg database obtain external identifiers. KEGG compound, drug glycan databases can queried pubchem chebi identifiers, vice-versa.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to or from kegg identifiers — kegg_lookup","text":"","code":"kegg_lookup(   get = \"pubchem\",   from = \"compound\",   query_column,   suffix = \"_kegg\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to or from kegg identifiers — kegg_lookup","text":"get (character) Get identifier. Allowed values limited following: \"compound\": KEGG small molecule database. \"glycan\": KEGG glycan database. \"drug\": KEGG drug database. \"chebi\": Chemical Entities Biological Interest (ChEBI) database. \"pubchem\": PubChem Substance Identifier. default \"pubchem\". (character) identifier. Allowed values limited following: \"compound\": KEGG small molecule database. \"glycan\": KEGG glycan database. \"drug\": KEGG drug database. \"chebi\": Chemical Entities Biological Interest (ChEBI) database. \"pubchem\": PubChem Substance Identifier. default \"compound\". query_column (character) name column containing identifiers search database . identifiers type selected \"\" slot. suffix (character) suffix appended column names returned result. default \"_kegg\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to or from kegg identifiers — kegg_lookup","text":" kegg_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to or from kegg identifiers — kegg_lookup","text":"object makes use functionality following packages: KEGGREST dplyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Convert to or from kegg identifiers — kegg_lookup","text":"kegg_lookup object inherits following struct classes: kegg_lookup() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert to or from kegg identifiers — kegg_lookup","text":"Tenenbaum D, Maintainer B (2023). KEGGREST: Client-side REST access Kyoto Encyclopedia Genes Genomes (KEGG). doi:10.18129/B9.bioc.KEGGREST https://doi.org/10.18129/B9.bioc.KEGGREST, R package version 1.42.0, https://bioconductor.org/packages/KEGGREST. Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/kegg_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to or from kegg identifiers — kegg_lookup","text":"","code":"M = kegg_lookup(       get = \"compound\",       from = \"compound\",       query_column = \"V1\",       suffix = \"_kegg\") #> Error in kegg_lookup(get = \"compound\", from = \"compound\", query_column = \"V1\",     suffix = \"_kegg\"): compound, drug and glycan ids can only be converted to chebi or pubchem ids"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lcms_table.html","id":null,"dir":"Reference","previous_headings":"","what":"An annotation table — lcms_table","title":"An annotation table — lcms_table","text":"annotation_table annotation_source() imported data.frame contains measured experimental data. id_column values required uniquely indentify record (row) table (NB molecule identifiers, may present multiple records).","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lcms_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An annotation table — lcms_table","text":"","code":"lcms_table(   data = data.frame(id = numeric(0), mz = numeric(0), rt = numeric(0)),   tag = \"\",   id_column = \"id\",   mz_column = \"mz\",   rt_column = \"rt\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lcms_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An annotation table — lcms_table","text":"data (data.frame) data.frame annotation data. default data.frame(id = character(0)). tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"\". id_column (character) column name annotation data.frame containing row identifers. NULL generated automatically. default \"id\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lcms_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An annotation table — lcms_table","text":"  annotation_table  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lcms_table.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"An annotation table — lcms_table","text":"annotation_table object inherits following struct classes: annotation_table() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lipidmaps_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"LipidMaps api lookup — lipidmaps_lookup","title":"LipidMaps api lookup — lipidmaps_lookup","text":"Search LipidMaps database using API","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lipidmaps_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LipidMaps api lookup — lipidmaps_lookup","text":"","code":"lipidmaps_lookup(   query_column,   context,   context_item,   output_item = \"all\",   suffix = \"_lipidmaps\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lipidmaps_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LipidMaps api lookup — lipidmaps_lookup","text":"query_column (character) name column annotation table containing values search api call. context (character) search API context. Must one \"compound\", \"gene\", \"protein\". context_item (character) context item searched. See https://lipidmaps.org/resources/rest details. output_item (character) names columns return results search. See https://lipidmaps.org/resources/rest details. default \"\". suffix (character) suffix appended column names returned result. default \"_lipidmaps\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lipidmaps_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LipidMaps api lookup — lipidmaps_lookup","text":" lipidmaps_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lipidmaps_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"LipidMaps api lookup — lipidmaps_lookup","text":"lipidmaps_lookup object inherits following struct classes: lipidmaps_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/lipidmaps_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LipidMaps api lookup — lipidmaps_lookup","text":"","code":"M = lipidmaps_lookup(       query_column = character(0),       output_item = \"input\",       context = \"compound\",       context_item = character(0),       base_url = \"https://www.lipidmaps.org/rest\",       url_template = \"<base_url>/<context>/<context_item>/<query_column>/<output_item>/json\",       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/ls_source.html","id":null,"dir":"Reference","previous_headings":"","what":"LCMS table — ls_source","title":"LCMS table — ls_source","text":"LCMS table extends annotation_table() represent annotation data LCMS experiment. Columns representing m/z retention time required lcms_table.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/ls_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LCMS table — ls_source","text":"","code":"ls_source(source, tag = \"LS\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/ls_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LCMS table — ls_source","text":"source () source annotation data. tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"LS\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/ls_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LCMS table — ls_source","text":"  ls_source  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/ls_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"LCMS table — ls_source","text":"ls_source object inherits following struct classes: ls_source() ⭢ lcms_table() ⭢ annotation_table() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":null,"dir":"Reference","previous_headings":"","what":"msPurity source — mspurity_source","title":"msPurity source — mspurity_source","text":"annotation source importing annotation table format created msPurity package.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"msPurity source — mspurity_source","text":"","code":"mspurity_source(source, tag = \"msPurity\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"msPurity source — mspurity_source","text":"source () source annotation data. tag (character) (short) character string used represent source e.g. column names source columns used workflow. default \"msPurity\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"msPurity source — mspurity_source","text":"  mspurity_source  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"msPurity source — mspurity_source","text":"object makes use functionality following packages: msPurity","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"msPurity source — mspurity_source","text":"mspurity_source object inherits following struct classes: mspurity_source() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mspurity_source.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"msPurity source — mspurity_source","text":"Lawson, Nigel T, Weber, M. RJ, Jones, R. M, Chetwynd, J. , Blanco R, Alejandro G, Guida D, Riccardo, Viant, R. M, Dunn, B W (2017). \"msPurity: Automated Evaluation Precursor Ion Purity Mass Spectrometry-Based Fragmentation Metabolomics.\" Analytical Chemistry, 89, 2432-2439. doi:10.1021/acs.analchem.6b04358 https://doi.org/10.1021/acs.analchem.6b04358.","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to/from kegg identifiers — mwb_compound_lookup","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"Searches MetabolomicsWorkbench compound identifiers.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"","code":"mwb_compound_lookup(   input_item = \"inchi_key\",   query_column,   output_item = \"pubchem_id\",   suffix = \"_mwb\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"input_item (character) valid input item compound context (see https://www.metabolomicsworkbench.org/tools/mw_rest.php). values query_column type. default \"inchi_key\". query_column (character) name column annotation table containing values search api call. output_item (character) comma separated list Valid output items compound context (see https://www.metabolomicsworkbench.org/tools/mw_rest.php). default \"pubchem_id\". suffix (character) suffix appended column names returned result. default \"_mwb\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":" mwb_compound_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"object makes use functionality following packages: metabolomicsWorkbenchR dplyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"mwb_compound_lookup object inherits following struct classes: mwb_compound_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"Lloyd GR, Weber RJM (2023). metabolomicsWorkbenchR: Metabolomics Workbench R. doi:10.18129/B9.bioc.metabolomicsWorkbenchR https://doi.org/10.18129/B9.bioc.metabolomicsWorkbenchR, R package version 1.12.0, https://bioconductor.org/packages/metabolomicsWorkbenchR. Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_compound_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to/from kegg identifiers — mwb_compound_lookup","text":"","code":"M = mwb_compound_lookup(       input_item = \"inchi_key\",       output_item = \"inchi_key\",       base_url = \"https://www.metabolomicsworkbench.org/rest\",       url_template = \"<base_url>/compound/<input_item>/<query_column>/<output_item>\",       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":null,"dir":"Reference","previous_headings":"","what":"mwb_refmet_database — mwb_refmet_database","title":"mwb_refmet_database — mwb_refmet_database","text":"Imports Metabolomics Workbench refmet database.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mwb_refmet_database — mwb_refmet_database","text":"","code":"mwb_refmet_database(bfc = NULL, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mwb_refmet_database — mwb_refmet_database","text":"bfc (character) BiocFileCache used cache database locally prevent unnecessary downloads. path provided BiocFileCache use location. NULL use default location (see BiocFileCache() details). default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mwb_refmet_database — mwb_refmet_database","text":"  mwb_refmet_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mwb_refmet_database — mwb_refmet_database","text":"object makes use functionality following packages: BiocFileCache httr plyr","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"mwb_refmet_database — mwb_refmet_database","text":"mwb_refmet_database object inherits following struct classes: mwb_refmet_database() ⭢ annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_refmet_database.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"mwb_refmet_database — mwb_refmet_database","text":"Shepherd L, Morgan M (2023). BiocFileCache: Manage Files Across Sessions. doi:10.18129/B9.bioc.BiocFileCache https://doi.org/10.18129/B9.bioc.BiocFileCache, R package version 2.10.1, https://bioconductor.org/packages/BiocFileCache. Wickham H (2023). httr: Tools Working URLs HTTP. R package version 1.4.7, https://CRAN.R-project.org/package=httr. Wickham H (2011). \"Split-Apply-Combine Strategy Data Analysis.\" Journal Statistical Software, 40(1), 1-29. https://www.jstatsoft.org/v40/i01/.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"MWB molecular structure — mwb_structure","title":"MWB molecular structure — mwb_structure","text":"Query Metabolomic Workbench API retrieve display image matching molecular structure.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MWB molecular structure — mwb_structure","text":"","code":"mwb_structure(query_column, row_index, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MWB molecular structure — mwb_structure","text":"query_column (character) name annotation_source column regno compound identifiers. row_index (integer, numeric) row index annotation_source request image molecular structure . ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MWB molecular structure — mwb_structure","text":"  mwb_structure  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MWB molecular structure — mwb_structure","text":"object makes use functionality following packages: cowplot metabolomicsWorkbenchR object queries Metabolomics Workbench API matches query without caching results. therefore intended limited use. wish obtain images large number moelucules seek alternative solution.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"MWB molecular structure — mwb_structure","text":"mwb_structure object inherits following struct classes: mwb_structure() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MWB molecular structure — mwb_structure","text":"Wilke C (2023). cowplot: Streamlined Plot Theme Plot Annotations 'ggplot2'. R package version 1.1.2, https://CRAN.R-project.org/package=cowplot. Lloyd GR, Weber RJM (2023). metabolomicsWorkbenchR: Metabolomics Workbench R. doi:10.18129/B9.bioc.metabolomicsWorkbenchR https://doi.org/10.18129/B9.bioc.metabolomicsWorkbenchR, R package version 1.12.0, https://bioconductor.org/packages/metabolomicsWorkbenchR.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mwb_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MWB molecular structure — mwb_structure","text":"","code":"M = mwb_structure(       row_index = 1,       query_column = \"V1\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mz_match.html","id":null,"dir":"Reference","previous_headings":"","what":"mz matching — mz_match","title":"mz matching — mz_match","text":"Annotations matched measured data variable meta data.frame determining annotations ppm window overlaps ppm window measured mz.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mz_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mz matching — mz_match","text":"","code":"mz_match(variable_meta, mz_column, ppm_window, id_column, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mz_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mz matching — mz_match","text":"variable_meta (data.frame) data.frame variable IDs corresponding mz values. mz_column (character) Column name mz values variable_meta. ppm_window (numeric, integer) Ppm window use matching. single value provided ppm used variable meta annotations. named vector can also provided e.g. c(\"variable_meta\"=5,\"annotations\"=2) use different windows data table. id_column (character) Column name variable ids variable_meta. id_column=\"rownames\" use rownames ids. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mz_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mz matching — mz_match","text":" mz_match object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mz_match.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"mz matching — mz_match","text":"mz_match object inherits following struct classes: mz_match() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mz_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mz matching — mz_match","text":"","code":"M = mz_match(       variable_meta = data.frame(id=NA),       mz_column = character(0),       ppm_window = numeric(0),       id_column = character(0)) #> Error in mz_match(variable_meta = data.frame(id = NA), mz_column = character(0),     ppm_window = numeric(0), id_column = character(0)): If providing two ppm windows then the vector must be named e.g. c(\"variable_meta\" = 5, \"annotations\"= 2)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mzrt_match.html","id":null,"dir":"Reference","previous_headings":"","what":"mz matching — mzrt_match","title":"mz matching — mzrt_match","text":"Annotations matched measured data variable meta data.frame determining annotations ppm rt windows overlap ppm rt windows measured mz.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mzrt_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mz matching — mzrt_match","text":"","code":"mzrt_match(   variable_meta,   mz_column,   rt_column,   ppm_window,   rt_window,   id_column,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mzrt_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mz matching — mzrt_match","text":"variable_meta (data.frame) data.frame variable IDs corresponding mz values. mz_column (character) Column name mz values variable_meta. rt_column (character) Column name rt values variable_meta. ppm_window (numeric, integer) Ppm window use matching. single value provided ppm used variable meta annotations. named vector can also provided e.g. c(\"variable_meta\"=5,\"annotations\"=2) use different windows data table. rt_window (numeric, integer) Rt window use matching. single value provided rt used variable meta annotations. named vector can also provided e.g. c(\"variable_meta\"=5,\"annotations\"=2) use different windows data table. id_column (character) Column name variable ids variable_meta. id_column=\"rownames\" use rownames ids. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mzrt_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mz matching — mzrt_match","text":" mzrt_match object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mzrt_match.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"mz matching — mzrt_match","text":"mzrt_match object inherits following struct classes: mzrt_match() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/mzrt_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mz matching — mzrt_match","text":"","code":"M = mzrt_match(       variable_meta = data.frame(id=NA),       mz_column = character(0),       ppm_window = numeric(0),       id_column = character(0),       rt_column = character(0),       rt_window = numeric(0)) #> Error in mzrt_match(variable_meta = data.frame(id = NA), mz_column = character(0),     ppm_window = numeric(0), id_column = character(0), rt_column = character(0),     rt_window = numeric(0)): If providing two ppm windows then the vector must be named e.g. c(\"variable_meta\" = 5, \"annotations\"= 2)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise Lipids nomenclature — normalise_lipids","title":"Normalise Lipids nomenclature — normalise_lipids","text":"Normalises differently formated lipid names consistent format.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise Lipids nomenclature — normalise_lipids","text":"","code":"normalise_lipids(column_name, grammar, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise Lipids nomenclature — normalise_lipids","text":"column_name (character) name column containing Lipids names normalise. grammar (character) grammar use normalising lipid names. Allowed values : Shorthand2020, Goslin, FattyAcids, LipidMaps, SwissLipids, HMDB .. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise Lipids nomenclature — normalise_lipids","text":" normalise_lipids object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise Lipids nomenclature — normalise_lipids","text":"object makes use functionality following packages: rgoslin","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Normalise Lipids nomenclature — normalise_lipids","text":"normalise_lipids object inherits following struct classes: normalise_lipids() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalise Lipids nomenclature — normalise_lipids","text":"Kopczynski D, Hoffmann N, Peng B, Ahrends R (2020). \"Goslin: Grammar Succinct Lipid Nomenclature.\" Analytical Chemistry, 92(16), 10957-10960. https://pubs.acs.org/doi/10.1021/acs.analchem.0c01690.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_lipids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise Lipids nomenclature — normalise_lipids","text":"","code":"M = normalise_lipids(       column_name = \"V1\",       grammar = \".all\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise string — normalise_strings","title":"Normalise string — normalise_strings","text":"Replace matching (sub)strings based provided dictionary search terms replacements.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise string — normalise_strings","text":"","code":"normalise_strings(   search_column,   output_column = NULL,   dictionary = list(),   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise string — normalise_strings","text":"search_column (character) column name input annotation_source searched matching (sub)strings. output_column (character, NULL) name new column modified strings stored . NULL search_column replaced. default NULL. dictionary (list, annotation_database) list patterns functions take input pattern return replacement string. annotation_database object containing suitable list can also used . default list(). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise string — normalise_strings","text":" normalise_strings object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise string — normalise_strings","text":"object makes use functionality following packages: dplyr item dictionary list #' least two fields: \"pattern\" \"replace\". \"pattern\" used inputs [grepl()] function detect matches input pattern. Parameters perl = TRUE can also included list passed [grepl()], otherwise defaults used. match detected function \"replace\" called inputs [grepl()]. \"replace\" function return new string. Alternatively replace = NA can used return NA matching pattern. character string provided [gsub()] used default.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Normalise string — normalise_strings","text":"normalise_strings object inherits following struct classes: normalise_strings() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalise string — normalise_strings","text":"Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.3, https://CRAN.R-project.org/package=dplyr.","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/normalise_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise string — normalise_strings","text":"","code":"M = normalise_strings(       search_column = character(0),       output_column = NULL,       dictionary = list())"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenBabel molecular structure — openbabel_structure","title":"OpenBabel molecular structure — openbabel_structure","text":"Display image molecular structure computed using OpenBabel.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OpenBabel molecular structure — openbabel_structure","text":"","code":"openbabel_structure(   smiles_column = \"smiles\",   row_index = 1,   image_size = 300,   hydrogens = \"implicit\",   carbons = \"terminal\",   double_bonds = \"asymmetric\",   colour_atoms = TRUE,   scale_to_fit = TRUE,   view_port = 300,   title_column = NULL,   subtitle_column = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OpenBabel molecular structure — openbabel_structure","text":"smiles_column (character) name annotation_source column compound identifiers type specified search_by param. default \"smiles\". row_index (integer, numeric) row index annotation_source request image molecular structure . default 1. image_size (numeric, integer) size image return pixels. Images square. default 300. hydrogens (character) Hydrogen atoms. Allowed values limited following: \"implicit\": Hydrogen atoms displayed. \"explicit\": hydrogen atoms displayed. default \"implicit\". carbons (character) Carbon atoms. Allowed values limited following: \"none\": Carbon atoms labelled. \"terminal\": Terminal carbons hydrogens labelled. \"\": carbon atoms labelled. default \"terminal\". double_bonds (character) display style double carbon bonds. default \"asymmetric\". colour_atoms (logical) Display atoms colour. default TRUE. scale_to_fit (logical) Normalise coordinates. Allowed values limited following: \"TRUE\": Molecules scaled fit inside bounding box image. \"FALSE\": Molecules scaled fit inside bounding box image. default TRUE. view_port (numeric, integer) Scales image insde viewport. Can used ensure set images bond lengths font sizes. effect scale_to_fit = TRUE. molecule might clipped viewport small. default 300. title_column (NULL, character) column containing text use title image. NULL title included. default NULL. subtitle_column (NULL, character) column containing text use subtitle image. NULL subtitle included. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OpenBabel molecular structure — openbabel_structure","text":"  openbabel_structure  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OpenBabel molecular structure — openbabel_structure","text":"object makes use functionality following packages: ChemmineOB cowplot rsvg","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"OpenBabel molecular structure — openbabel_structure","text":"openbabel_structure object inherits following struct classes: openbabel_structure() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"OpenBabel molecular structure — openbabel_structure","text":"Horan K, Girke T (2023). ChemmineOB: R interface subset OpenBabel functionalities. doi:10.18129/B9.bioc.ChemmineOB https://doi.org/10.18129/B9.bioc.ChemmineOB, R package version 1.40.0, https://bioconductor.org/packages/ChemmineOB. Wilke C (2023). cowplot: Streamlined Plot Theme Plot Annotations 'ggplot2'. R package version 1.1.2, https://CRAN.R-project.org/package=cowplot. Ooms J (2023). rsvg: Render SVG Images PDF, PNG, (Encapsulated) PostScript, Bitmap Arrays. R package version 2.6.0, https://CRAN.R-project.org/package=rsvg.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/openbabel_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OpenBabel molecular structure — openbabel_structure","text":"","code":"M = openbabel_structure(       smiles_column = \"V1\",       image_size = 300,       hydrogens = \"implicit\",       carbons = \"terminal\",       double_bonds = \"symmetric\",       colour_atoms = FALSE,       scale_to_fit = FALSE,       row_index = 1,       view_port = 300,       title_column = NULL,       subtitle_column = NULL)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Compound ID lookup via OPSIN — opsin_lookup","title":"Compound ID lookup via OPSIN — opsin_lookup","text":"Uses OPSIN API https://opsin.ch.cam.ac.uk/ search identifers based input annotation column.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compound ID lookup via OPSIN — opsin_lookup","text":"","code":"opsin_lookup(query_column, suffix = \"_opsin\", output = \"cids\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compound ID lookup via OPSIN — opsin_lookup","text":"query_column (character) column name use reference searching database e.g. \"compound_name\". OPSIN expect molecule names input. suffix (character) suffix appended column names returned result. default \"_opsin\". output (character) value returned pubchem database. default \"cids\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compound ID lookup via OPSIN — opsin_lookup","text":" opsin_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Compound ID lookup via OPSIN — opsin_lookup","text":"opsin_lookup object inherits following struct classes: opsin_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compound ID lookup via OPSIN — opsin_lookup","text":"Lowe, M. D, Corbett, T. P, Murray-Rust, Peter, Glen, C. R (2011). \"Chemical Name Structure: OPSIN, Open \", \"Source Solution.\" Journal Chemical Information Modeling, 51(3), 793-753. doi:10.1021/ci100384d https://doi.org/10.1021/ci100384d.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/opsin_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compound ID lookup via OPSIN — opsin_lookup","text":"","code":"M = opsin_lookup(       output = \"stdinchikey\",       base_url = \"https://opsin.ch.cam.ac.uk/opsin\",       url_template = \"<base_url>/<query_column>.<output>\",       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_compound_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Compound ID lookup via PubChem — pubchem_compound_lookup","title":"Compound ID lookup via PubChem — pubchem_compound_lookup","text":"Uses PubChem API search CID based input annotation column.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_compound_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compound ID lookup via PubChem — pubchem_compound_lookup","text":"","code":"pubchem_compound_lookup(   query_column,   search_by,   suffix = \"_pubchem\",   output = \"cids\",   records = \"best\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_compound_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compound ID lookup via PubChem — pubchem_compound_lookup","text":"query_column (character) column name use reference searching database e.g. \"HMBD_ID\". search_by (character) PubChem domain search matches annotation_column. suffix (character) suffix appended column names returned result. default \"_pubchem\". output (character) value returned pubchem database. default \"cids\". records (character) Returned record(s). Allowed values limited following: \"\": Sometimes multiple matches PubChem, database especially searhcing name. \"best\": Return best matching record. \"\": Return matching records. default \"best\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_compound_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compound ID lookup via PubChem — pubchem_compound_lookup","text":" pubchem_compound_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_compound_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Compound ID lookup via PubChem — pubchem_compound_lookup","text":"pubchem_compound_lookup object inherits following struct classes: pubchem_compound_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_compound_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compound ID lookup via PubChem — pubchem_compound_lookup","text":"","code":"M = pubchem_compound_lookup(       search_by = \"cid\",       output = \"cids\",       records = \"best\",       base_url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound\",       url_template = \"<base_url>/<search_by>/<query_column>/<output>/JSON\",       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_property_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Compound property lookup via pubchem — pubchem_property_lookup","title":"Compound property lookup via pubchem — pubchem_property_lookup","text":"Uses PubChem API search CID based input annotation column returns property information.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_property_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compound property lookup via pubchem — pubchem_property_lookup","text":"","code":"pubchem_property_lookup(   query_column,   search_by,   suffix = \"_pubchem\",   property = \"InChIKey\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_property_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compound property lookup via pubchem — pubchem_property_lookup","text":"query_column (character) column name use reference searching database e.g. \"HMBD_ID\". search_by (character) PubChem domain search matches annotation_column. suffix (character) suffix appended column names returned result. default \"_pubchem\". property (character) comma separated list properties return pubchem database. (see https://pubchem.ncbi.nlm.nih.gov/docs/pug-rest#section=Compound-Property-Tables details). Keyword \".\" return properties. default \"InChIKey\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_property_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compound property lookup via pubchem — pubchem_property_lookup","text":" pubchem_property_lookup object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_property_lookup.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Compound property lookup via pubchem — pubchem_property_lookup","text":"pubchem_property_lookup object inherits following struct classes: pubchem_property_lookup() ⭢ pubchem_compound_lookup() ⭢ rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_property_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compound property lookup via pubchem — pubchem_property_lookup","text":"","code":"M = pubchem_property_lookup(       search_by = \"cid\",       property = \"InChIKey\",       output = \"cids\",       records = \"best\",       base_url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound\",       url_template = \"<base_url>/<search_by>/<query_column>/property/<property>/JSON\",       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"PubChem molecular structure — pubchem_structure","title":"PubChem molecular structure — pubchem_structure","text":"Query PubChem api retrieve display image matching molecular structure.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PubChem molecular structure — pubchem_structure","text":"","code":"pubchem_structure(   query_column,   search_by,   row_index,   record_type = \"2d\",   image_size = \"large\",   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PubChem molecular structure — pubchem_structure","text":"query_column (character) name annotation_source column compound identifiers type specified search_by param. search_by (character) PubChem domain search matches annotation_column. row_index (integer, numeric) row index annotation_source request image molecular structure . record_type (character) record type return PubChem query. Can one \"2d\" \"3d\". default \"2d\". image_size (character) size image return PubChem query. Can one \"large\" \"small\". record_type = \"2d\" arbitrary image size can specified e.g. 123x123. default \"large\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PubChem molecular structure — pubchem_structure","text":"  pubchem_structure  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PubChem molecular structure — pubchem_structure","text":"object makes use functionality following packages: cowplot object queries PubChem API matches query without caching results. therefore intended limited use. wish obtain images large number moelucules seek alternative solution.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PubChem molecular structure — pubchem_structure","text":"pubchem_structure object inherits following struct classes: pubchem_structure() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PubChem molecular structure — pubchem_structure","text":"Wilke C (2023). cowplot: Streamlined Plot Theme Plot Annotations 'ggplot2'. R package version 1.1.2, https://CRAN.R-project.org/package=cowplot.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PubChem molecular structure — pubchem_structure","text":"","code":"M = pubchem_structure(       query_column = \"V1\",       search_by = \"cid\",       row_index = 1,       record_type = \"2d\",       image_size = \"large\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":null,"dir":"Reference","previous_headings":"","what":"PubChem widget — pubchem_widget","title":"PubChem widget — pubchem_widget","text":"Display PubChem HTML widget compound.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PubChem widget — pubchem_widget","text":"","code":"pubchem_widget(   query_column,   row_index,   record_type = \"2D-Structure\",   hide_title = FALSE,   width = \"100%\",   height = \"650px\",   display = TRUE,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PubChem widget — pubchem_widget","text":"query_column (character) name annotation_source column compound identifiers type specified search_by param. row_index (integer, numeric) row index annotation_source request image molecular structure . record_type (character) record type widget. default \"2D-Structure\". hide_title (logical) Hide widget title. Allowed values limited following: \"TRUE\": title displayed. \"FALSE\": title displayed. default FALSE. width (integer, numeric, character) width widget CSS style compatible format e.g. \"100%\". Numerical values converted character. default \"100%\". height (integer, numeric, character) height widget CSS style compatible format e.g. \"100%\". Numerical values converted character. default \"650px\". display (logical) Display widget. Allowed values limited following: \"TRUE\": Display widget. \"FALSE\": display widget return HTML. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PubChem widget — pubchem_widget","text":"  pubchem_widget  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PubChem widget — pubchem_widget","text":"object makes use functionality following packages: htmltools","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PubChem widget — pubchem_widget","text":"pubchem_widget object inherits following struct classes: pubchem_widget() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PubChem widget — pubchem_widget","text":"Cheng J, Sievert C, Schloerke B, Chang W, Xie Y, Allen J (2023). htmltools: Tools HTML. R package version 0.5.7, https://CRAN.R-project.org/package=htmltools.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/pubchem_widget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PubChem widget — pubchem_widget","text":"","code":"M = pubchem_widget(       query_column = \"V1\",       row_index = 1,       record_type = \"2D-Structure\",       hide_title = FALSE,       width = \"100%\",       height = 400,       display = FALSE)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rds_database.html","id":null,"dir":"Reference","previous_headings":"","what":"rds database — rds_database","title":"rds database — rds_database","text":"data.frame stored RDS file.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rds_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rds database — rds_database","text":"","code":"rds_database(source = character(0), ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rds_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rds database — rds_database","text":"source () source annotation data. default character(0). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rds_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rds database — rds_database","text":"  rds_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rds_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"rds database — rds_database","text":"rds_database object inherits following struct classes: rds_database() ⭢ annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a database — read_database","title":"Read a database — read_database","text":"Reads annotation_database returns data.frame.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a database — read_database","text":"","code":"read_database(obj, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a database — read_database","text":"obj annotation_database object","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a database — read_database","text":"data.frame","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a database — read_database","text":"","code":"M = rds_database(tempfile()) df = read_database(M) #> Warning: cannot open compressed file '/tmp/RtmpEYRwVY/file100d2d423e63', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Import annotation source — read_source","title":"Import annotation source — read_source","text":"Import data e.g. raw file parse annotation_source() object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import annotation source — read_source","text":"","code":"read_source(obj, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import annotation source — read_source","text":"obj annotation_source() object ... currently used","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import annotation source — read_source","text":"annotation_table(), annotation_library() annotation_database() object","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/read_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import annotation source — read_source","text":"","code":"# prepare source CD = cd_source(         source = system.file(             paste0('extdata/MTox/CD/HILIC_POS.xlsx'),             package = 'MetMasheR')          )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rest_api.html","id":null,"dir":"Reference","previous_headings":"","what":"rest_api — rest_api","title":"rest_api — rest_api","text":"","code":"A base class providing common methods for making REST API calls."},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rest_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rest_api — rest_api","text":"","code":"rest_api(   base_url,   url_template,   suffix,   status_codes,   delay,   cache = NULL,   query_column,   ... )"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rest_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rest_api — rest_api","text":"base_url (character) base URL API. url_template (character) template describing URL constructed base URL input parameters. e.g. <base_url>//<input_item>/<search_term>/json.url constructed replacing values enclosed <> value corresponding input parameter rest_api object. suffix (character) suffix appended column names returned result. status_codes (list) Named list status codes function indicating respond. minimally contain function parse successful response status code 200. codes provided passed httr::stop_for_status(). delay (numeric, integer) Delay seconds API calls. cache (annotation_database, NULL) struct cache object contains parsed responses previous api queries. using cache set NULL. default NULL. query_column (character) name column annotation table containing values search api call. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rest_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rest_api — rest_api","text":" rest_api object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rest_api.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"rest_api — rest_api","text":"rest_api object inherits following struct classes: rest_api() ⭢ model() ⭢ struct_class()","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rest_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rest_api — rest_api","text":"","code":"M = rest_api(       base_url = \"V1\",       url_template = character(0),       query_column = character(0),       cache = NULL,       status_codes = list(),       delay = 0.5,       suffix = \"_rest_api\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rt_match.html","id":null,"dir":"Reference","previous_headings":"","what":"rt matching — rt_match","title":"rt matching — rt_match","text":"Annotations matched measured variable meta data.frame determining annotations rt window overlaps rt window measured rt.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rt_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rt matching — rt_match","text":"","code":"rt_match(variable_meta, rt_column, rt_window, id_column, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rt_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rt matching — rt_match","text":"variable_meta (data.frame) data.frame variable IDs corresponding rt values. rt_column (character) Column name rt values variable_meta. rt_window (numeric, integer) Rt window use matching. single value provided rt used variable meta annotations. named vector can also provided e.g. c(\"variable_meta\"=5,\"annotations\"=2) use different windows data table. id_column (character) Column name variable ids variable_meta. id_column=\"rownames\" use rownames ids. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rt_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rt matching — rt_match","text":" rt_match object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rt_match.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"rt matching — rt_match","text":"rt_match object inherits following struct classes: rt_match() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/rt_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rt matching — rt_match","text":"","code":"M = rt_match(       variable_meta = data.frame(id=NA),       rt_column = character(0),       rt_window = numeric(0),       id_column = character(0)) #> Error in rt_match(variable_meta = data.frame(id = NA), rt_column = character(0),     rt_window = numeric(0), id_column = character(0)): If providing two retention time windows then the vector must be named e.g. c(\"variable_meta\" = 5, \"annotations\"= 2)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":null,"dir":"Reference","previous_headings":"","what":"SQLite database — sqlite_database","title":"SQLite database — sqlite_database","text":"data.frame stored SQLite database.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SQLite database — sqlite_database","text":"","code":"sqlite_database(source, table = \"annotation_database\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SQLite database — sqlite_database","text":"source () source annotation data. table (character) name table SQLite database. default \"annotation_database\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SQLite database — sqlite_database","text":"  sqlite_database  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SQLite database — sqlite_database","text":"object makes use functionality following packages: RSQLite","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"SQLite database — sqlite_database","text":"sqlite_database object inherits following struct classes: sqlite_database() ⭢ annotation_database() ⭢ annotation_source() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/sqlite_database.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SQLite database — sqlite_database","text":"Müller K, Wickham H, James DA, Falcon S (2023). RSQLite: SQLite Interface R. R package version 2.3.4, https://CRAN.R-project.org/package=RSQLite.","code":""},{"path":[]},{"path":[]},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation venn chart — struct_venn_set","title":"Annotation venn chart — struct_venn_set","text":"Display venn diagram labels present two annotation_sources.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation venn chart — struct_venn_set","text":"","code":"struct_venn_set(set, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation venn chart — struct_venn_set","text":"... Additional slots values passed struct_class. factor_name (character) name column(s) annotation_source generate chart . seven columns can compared single annotation_source. group_column (character, NULL) name column annotation_source create groups Venn diagram. parameter ignored multiple input tables, table considered group. parameter also ignored one factor_name provided, column considered group. default NULL. fill_colour (character) line colour groups format compatible ggplot e.g. \"black\" \"#000000\". Special case \".group\" sets colour based group label \"none\" fill groups. default \"white\". line_colour (character) line colour groups format compatible ggplot e.g. \"black\" \"#000000\". Special case \".group\" sets colour based group label, \".none\" display lines. default \"black\". labels (logical) Group labels. Allowed values limited following: \"TRUE\": Include group labels plot. \"FALSE\": inlude group labels plot. default TRUE. legend (logical) Legend. Allowed values limited following: \"TRUE\": Include legend plot. \"FALSE\": inlude legend plot. default FALSE.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation venn chart — struct_venn_set","text":"  annotation_venn_chart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation venn chart — struct_venn_set","text":"object makes use functionality following packages: RVenn ggVennDiagram","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Annotation venn chart — struct_venn_set","text":"annotation_venn_chart object inherits following struct classes: annotation_venn_chart() ⭢ chart() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Annotation venn chart — struct_venn_set","text":"Akyol T (2019). RVenn: Set Operations Many Sets. R package version 1.1.0, https://CRAN.R-project.org/package=RVenn. Gao C (2023). ggVennDiagram: 'ggplot2' Implement Venn Diagram. R package version 1.4.9, https://CRAN.R-project.org/package=ggVennDiagram.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/struct_venn_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation venn chart — struct_venn_set","text":"","code":"M = annotation_venn_chart(       factor_name = \"V1\",       line_colour = \".group\",       fill_colour = \".group\",       labels = FALSE,       legend = FALSE,       group_column = NULL)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/trim_whitespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim whitespace — trim_whitespace","title":"Trim whitespace — trim_whitespace","text":"wrapper trimws(). Removes leading /trailing whitespace character strings.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/trim_whitespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim whitespace — trim_whitespace","text":"","code":"trim_whitespace(column_names, which = \"both\", whitespace = \"[ \\t\\r\\n]\", ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/trim_whitespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim whitespace — trim_whitespace","text":"column_names (character) column name(s) annotation_source trim white space . Special case \".\" apply columns. (character) Trailing /leading whitespace. Allowed values limited following: \"\": character string specifying location whitespace remove. \"left\": Remove leading whitespace. \"right\": Remove trailing whitespace. \"\": Remove leading trailing whitespace. default \"\". whitespace (character) string specifying regular expression match (one character ) \"white space\". See trimws() details. default \"[      ]\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/trim_whitespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim whitespace — trim_whitespace","text":" trim_whitespace object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/trim_whitespace.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Trim whitespace — trim_whitespace","text":"trim_whitespace object inherits following struct classes: trim_whitespace() ⭢ model() ⭢ struct_class()","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/trim_whitespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim whitespace — trim_whitespace","text":"","code":"M = trim_whitespace(       column_names = \"V1\",       which = \"both\",       whitespace = \"[    ]\")"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/vertical_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join sources vertically — vertical_join","title":"Join sources vertically — vertical_join","text":"function join sources vertically. vertical join involves matching common columns across source data.frames padding missing columns create single new data.frame data records multiple sources.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/vertical_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join sources vertically — vertical_join","text":"","code":"vertical_join(x, y, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/vertical_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join sources vertically — vertical_join","text":"x annotation_source object y second annotation_source object join first","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/vertical_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join sources vertically — vertical_join","text":"annotation_source object","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/vertical_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join sources vertically — vertical_join","text":"","code":"M = annotation_source() N = annotation_source() O = vertical_join(M,N) #> Error in select(., any_of(keep_cols)): Can't select within an unnamed vector."},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/write_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to a database — write_database","title":"Write to a database — write_database","text":"Writes data.frame annotation_database.","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/write_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to a database — write_database","text":"","code":"write_database(obj, ...)"},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/write_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to a database — write_database","text":"obj annotation_database object","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/write_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write to a database — write_database","text":"Silently returns TRUE successful, FALSE otherwise","code":""},{"path":"https://computational-metabolomics.github.io/MetMashR/reference/write_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write to a database — write_database","text":"","code":"M = rds_database(tempfile()) write_database(M,data.frame())"}]
